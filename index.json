[{"categories":["资源","导航"],"content":"工具、娱乐、资源、软件…… ","date":"2021-04-19","objectID":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/:0:0","series":null,"tags":["资源","导航"],"title":"网站收藏🔝","uri":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"},{"categories":["资源","导航"],"content":"在线工具 在线PDF工具 easy PDF PDF24 Tools iLovePDF 在线图片处理 iLoveIMG IMG365 无需上传的图片格式转换器 AI人工智能图片放大 图像压缩 快速AI自动抠图 在线图片去底 在线GIF制作和编辑 EasyScreenOCR ONLINE OCR 小米风格Logo生成器 favicon图标制作工具 favicon图标生成器 Figen - Post Cover \u0026 Background Generator Tool 在线音频/视频处理 网易见外工作台 编程 W3school Overleaf KaTeX - Supported Functions Linux 命令列表 Ubuntu Pastebin OnlineGDB C++ shell regex101 Learn Git Branching 天梯图 桌面CPU性能天梯图 桌面GPU性能天梯图 笔记本CPU性能天梯图 笔记本GPU性能天梯图 手机CPU性能天梯图 手机影像DxO综合榜 Steam历史价格查询 全球Apple产品比价 极简简历模板PoleBrief 萝卜工坊 - 模拟手写字体 ProcessOn - 在线思维导图、流程图 英文字体转换 ","date":"2021-04-19","objectID":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/:1:0","series":null,"tags":["资源","导航"],"title":"网站收藏🔝","uri":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"},{"categories":["资源","导航"],"content":"在线观看 影视 低端影视 奈菲影视 看片狂人 NO视频 动漫 AGE动漫 ZzzFun 樱花动漫 漫岛动漫 EDD动漫 漫画 漫画DB 动漫之家 体育 CCTV-5体育频道高清直播 直播6 比赛直播 JRKAN直播 55直播 直播吧 64体育 七星直播 足球巴巴 极速体育 147体育 310看球网 jrs直播 低调看吧 来球网 纪录片天地 ","date":"2021-04-19","objectID":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/:2:0","series":null,"tags":["资源","导航"],"title":"网站收藏🔝","uri":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"},{"categories":["资源","导航"],"content":"资源下载 影视 高清MP4粉 片源网 BT天堂 SubDH FIX字幕侠 牛牛美剧 音范丝 Nyaa RARBG 字幕 SubHD 字幕库 A4k字幕网 90分钟足球网 知轩藏书 动漫 动漫领域 肥羊-Raws 11周年Peach 不移之火资源网 漫猫动漫BT下载 爱恋动漫BT下载 磁力 磁力爬 GFW 八爪鱼磁搜 搜番 吃力网 电影淘淘 Torrent Kitty - 免费种子转磁力网站 云盘狗 搜盘么 Office Word联盟 优品PPT PPT超级市场 第1PPT PPT演示设计网址导航 图片 Dribbble Pinterest Freepik Unsplash DeviantArt Behance 极简壁纸1 极简壁纸2 Wallpaper Abyss wallhaven 图标 Worldvectorlogo Iconduck StickPNG Iconfont-阿里巴巴矢量图标库 设计之家 插画 Storyset StickPNG Iconfont-阿里巴巴矢量图标库 设计 Figma 摄影 天空之城 游戏 Liquipedia DST-MOD Wikri 叽哩叽哩游戏网ACG（G站） 小爱同学音色网 ","date":"2021-04-19","objectID":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/:3:0","series":null,"tags":["资源","导航"],"title":"网站收藏🔝","uri":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"},{"categories":["资源","导航"],"content":"软件 MSDN,我告诉你 吾爱破解 异星软件空间 易酷软件 果核剥壳 Easy To Direct Download Pc Software Crack Softwares 下载免费Wondows个人电脑游戏及软件 捷径库 反斗软件 Mergeek - 发现好产品 Appwall Today - iOS 每日限免 Awesome Windows 必备 ShareX Snipaste Clover uTools Bandizip 天若OCR Everything RubberTranslator CopyTranslator ","date":"2021-04-19","objectID":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/:4:0","series":null,"tags":["资源","导航"],"title":"网站收藏🔝","uri":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"},{"categories":["资源","导航"],"content":"导航 不死鸟 - 分享为王 福利吧 缙哥哥博客 - 福利分享 好棒的羊毛站 创造狮导航 A+医学百科 wikiHow - 万事指南 ","date":"2021-04-19","objectID":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/:5:0","series":null,"tags":["资源","导航"],"title":"网站收藏🔝","uri":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"},{"categories":["资源","导航"],"content":"推荐 The best Programming books 历史剧网 油猴插件 Greasy Fork 雷利子 秒传链接提取 数学 Mathway | 微积分问题解答者 ","date":"2021-04-19","objectID":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/:6:0","series":null,"tags":["资源","导航"],"title":"网站收藏🔝","uri":"/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"},{"categories":["资源","导航"],"content":"汇集网上的各种学习资料。 面试 CS-Notes：在线 Coding Interview University：中文 算法 The Algorithms labuladong 的算法小抄：在线阅读：GitHub Pages，Gitbook，Gitee Pages 算法珠玑：在线 《algorithm-note》中文版：在线 社区 阿里云天池 Kaggle Dataquest AI研习社 AMiner 博客 『A Course in Machine Learning』by Hal Daumé III AI算法工程师手册 论文 Papers With Code CVF Open Access Best Paper Awards in CS SCI-Hub论文下载可用网址链接 企鹅论文 一键下载 Deep learning: Technical introduction：深度学习综述 What Do We Understand About Convolutional Networks?：CNN 综述 Bringing Old Photos Back to Life：修复旧照片 深度学习论文翻译 深度学习入门教程, 优秀文章 AiLearning: 机器学习：在线 机器学习原理：在线 Data-Science-Notes CS229 课程讲义中文翻译：在线 斯坦福大学2014（吴恩达）机器学习教程中文笔记：在线 《神经网络与深度学习》 邱锡鹏：在线 Deep Learning with PaddlePaddle：在线 教程 《简明的 TensorFlow 2》 | 在线 📅2021/07/15 🌟3484 30天吃掉那只TensorFlow2 ｜ GitBook 📅2021/05/27 🌟8855 TensorFlow 2.0 Tutorials 📅2020/09/23 🌟5993 20天吃掉那只Pytorch 20210704 深度学习500问 20210317 nlp-tutorial 20210502 Machine Learning for Beginners - A Curriculum 20210721 《Deep Learning》 《The Elements of Statistical Learning》中文版 《Interpretable machine learning》 | 在线 20210713 《动手学深度学习》李沐 | 在线 20210717 《神经网络与深度学习》邱锡鹏 | 在线 20210518 公开课 机器学习 - 吴恩达 | Coursera WordTEX 网络安全 《CTF竞赛权威指南》 | GitBook TryHackMe Attack-Defense Online Lab XSS 挑战 CTF - Application Security Challenge Command Challenge Exploit Education Google CTF Hack The Box Defend the Web Hacksplaining Hacker101 CTF 项目 HelloGitHub pandas Joyful-Pandas | 在线 20210331 User Guide — pandas Java How2J 的 Java教程 环境搭建 环境搭建 Arch Linux 安装使用教程 Linux Linux命令行与Shell脚本教程 Linux 网络编程与加密 数据库 SQLBolt: interactive lessons and exercises Github MockingBird: AI拟声，5秒内克隆您的声音并生成任意语音内容 concurrent: 深入浅出Java多线程，在线阅读 Learn-Algorithms: 算法学习笔记 algorithm-note: 数据结构与算法的讲解及代码实现，在线阅读 matplotlib/cheatsheets: Official Matplotlib cheat sheets Data Structure Visualizations Introduction-to-Golang: golang资料 LaTeX-OCR: pix2tex, Using a ViT to convert images of equations into LaTeX code Bifrost: Search for visual datasets by task, application, class, label or format 深入理解 TypeScript: TypeScript Deep Dive的中文翻译版，在线阅读 Manim Community: Python library for creating mathematical animations deepcourse: Deep Learning for Computer Vision, Read Online Machine Learning Crash Course: Google’s fast-paced, practical introduction to machine learning SG-NLP: SG-NLP is an initiative by AI Singapore’s NLP Hub A Vim Guide For Experts PearOCR 不懂动态规划？21道 LeetCode题目带你学会动态规划！ 五万字《十大排序算法》动图讲解 Diffgram: Training data platform for machine learning delivered as a single application Forecasting: Principles and Practice (3rd ed) Greykite: A flexible, intuitive and fast forecasting library flow-forecast: Deep learning PyTorch library for time series forecasting, classification, and anomaly detection Start Machine Learning in 2021: A complete guide to start and improve in machine learning (ML), artificial intelligence (AI) in 2021 Best Resources to Learn Natural Language Processing in 2021 Codeimg.io: Convert code to image clean-code-javascript: Clean Code concepts adapted for JavaScript Macast: A menu bar application using mpv as DLNA Media Renderer. You can push videos, pictures or musics from your mobile phone to your computer Real-time-stock-market-prediction: Server architecture for Real-time Stock-market prediction with ML Open Video Downloader (youtube-dl-gui): A cross-platform GUI for youtube-dl made in Electron and node.js free-project-course: 整理和搜集网络免费的项目实战课程 design-patterns-for-humans-cn: Design patterns for humans中文版 Algorithms by Jeff Erickson Competitive-Programming-Resources Algorithm Guide: 程序员必知必会的算法和数据结构 PythonAiRoad: X分钟学会XX Cheatsheet for regex syntaxes: Read Online Awesome Scriptable: A curated list of awesome Scriptable scripts and widgets THU-Beamer-Theme: A LaTeX beamer theme template for Tsinghua students, Read Online Algorithms, 4th Edition Versus: 万物皆可对比 Appscope: Progressive Web Apps Examples 英语语法网 中国人民大学英语口语能力标准 Bit Twiddling Hacks: 位运算奇淫巧计 Pl@ntNet: 植物图像识别 卖萌屋学术站: 每日学术论文 Table Convert Online:table to markdown, csv, json, latex table, excel, sql, xml Learn LaTeX C Programming Course 算法珠玑","date":"2021-04-14","objectID":"/posts/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/:0:0","series":null,"tags":["资源","导航"],"title":"学习资料🔝","uri":"/posts/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"},{"categories":[],"content":"根据模型预测值和真实值的区别来评价模型。 ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:0:0","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.回归 ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:0","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.1 MAE 平均绝对误差，MAE，Mean Absolute Error $$ MAE(y,\\hat{y})=\\frac{1}{n}\\sum_{i=1}^n|y_i-\\hat{y}_i| $$ ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:1","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.2 MAPE 平均绝对百分比误差，MAPE，Mean Absolute Percentage Error $$ MAPE(y,\\hat{y})=\\frac{1}{n}\\sum_{i=1}^n\\frac{|y_i-\\hat{y}_i|}{|y_i|} $$ ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:2","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.3 MSE 均方误差，MSE，Mean Squared Error $$ MSE(y,\\hat{y})=\\frac{1}{n}\\sum_{i=1}^n|y_i-\\hat{y}_i|_2^2 $$ ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:3","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.4 RMSE 均方根误差，RMSE，Root Mean Squared Error $$ RMSE(y,\\hat{y})=\\sqrt{\\frac{1}{n}\\sum_{i=1}^n|y_i-\\hat{y}_i|_2^2} $$ ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:4","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.5 MSLE 均方误差对数，MSLE，Mean Squared Log Error $$ MSLE(y,\\hat{y})=\\frac{1}{n}\\sum_{i=1}^n\\big(\\log{(1+y_i)}-\\log{(1+\\hat{y}_i)}\\big)^2 $$ ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:5","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.6 MedAE 中位绝对误差，MedAE，Median Absolute Error $$ MedAE(y,\\hat{y})=median(|y_1-\\hat{y}_1|,\\cdots,|y_n-\\hat{y}_n|) $$ ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:6","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"1.7 $R^2$ 拟合优度/可决系数，$R^2$，R Squared $$ R^2(y,\\hat{y})=1-\\frac{\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}{\\sum_{i=1}^n(y_i-\\bar{y})^2} $$ ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:1:7","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"参考 回归模型的评价指标比较 - 知乎 ","date":"2021-09-01","objectID":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/:2:0","series":null,"tags":[],"title":"评价指标","uri":"/posts/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"},{"categories":[],"content":"类图是 UML 中面向对象系统建模中最常用和最重要的图，是定义其它图的基础。类图主要是用来显示系统中的类、接口以及它们之间的静态结构和关系的一种静态模型。 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"1.类图表示 一个类的 UML 图表示为一个矩形框，分为三层： 类名 粗体居中 若为抽象类，类名和抽象方法用斜体表示 若为接口，类名上加\u003c\u003cinterface\u003e\u003e，一般无属性 属性 可见性 + 属性名 + 类型 方法 可见性 + 方法名 + ( + 参数名 + 参数类型 + ) + 返回类型 可见性： -表示private #表示protected 空表示package/default +表示public ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"2.关系表示 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"2.1 泛化（Generalization） 关系：继承非抽象类 表示：子类指向父类的实线空心三角箭头 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:2:1","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"2.2 实现（Realize） 关系：继承抽象类 表示：子类指向父类的虚线空心三角箭头 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:2:2","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"2.3 聚合（Aggregation） 关系：成员对象是整体对象的属性，部分可独立存在，且可属于多个整体 表示：部分指向整体的实线空心菱形箭头 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:2:3","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"2.4 组合（Composition） 关系：成员对象是整体对象的属性，整体与部分密不可分 表示：部分指向整体的实线实心菱形箭头 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:2:4","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"2.5 关联（Association） 关系：成员对象是整体对象的属性，一般表示一种平等关系 表示：部分指向整体的实线箭头 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:2:5","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"2.6 依赖（Dependency） 关系：依赖对象一般作为参数传入另一个对象 表示：对象指向依赖对象的虚线箭头 ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:2:6","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"参考 看懂UML类图和时序图 — Graphic Design Patterns 30分钟学会UML类图 - 知乎 Class diagrams - Mermaid ","date":"2021-08-22","objectID":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":[],"title":"UML 类图教程","uri":"/posts/uml-%E7%B1%BB%E5%9B%BE%E6%95%99%E7%A8%8B/"},{"categories":["位运算","力扣"],"content":"题目链接 ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:0:0","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":["位运算","力扣"],"content":"方法一：模拟 ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:1:0","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":["位运算","力扣"],"content":"代码 class Solution { public: int xorOperation(int n, int start) { int ans = start; for (int i = 1; i \u003c n; ++i) { ans ^= (start + i * 2); } return ans; } }; ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:1:1","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":["位运算","力扣"],"content":"复杂度分析 时间复杂度：$ O(n) $ 空间复杂度：$ O(1) $ ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:1:2","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":["位运算","力扣"],"content":"方法二：数学 ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:2:0","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":["位运算","力扣"],"content":"思路 首先介绍异或运算： 对于单个比特的异或，相同为0，相异为1，即： $ 0 \\oplus 0 = 0 $ $ 0 \\oplus 1 = 1 $ $ 1 \\oplus 0 = 1 $ $ 1 \\oplus 1 = 0 $ 对于整数的异或，按最低位对齐，相同位置的比特进行异或运算，如： $ \\ \\ \\ \\ 0001 \\ (1) $ $ \\underline{\\oplus \\ 0011 \\ (3)} $ $ \\ \\ \\ \\ 0010 \\ (2) $ 异或运算满足以下基本性质： $ a \\oplus a = 0 $ $ a \\oplus 0 = a $ $ a \\oplus b = b \\oplus a $ $ (a \\oplus b) \\oplus c = a \\oplus (b \\oplus c) $ 可以推导出如下性质： $ a \\oplus b \\oplus b = a $ $ \\forall i \\in \\mathbb{Z}, 有 \\underbrace{a \\oplus 0 \\oplus a \\oplus a \\oplus \\cdots \\oplus 0 \\oplus a}_{2i+1个a} = a $ $ \\forall i \\in \\mathbb{Z}, 有 \\underbrace{a \\oplus 0 \\oplus a \\oplus a \\oplus \\cdots \\oplus 0 \\oplus a}_{2i个a} = 0 $ $ \\forall i \\in \\mathbb{Z}, 有 4i \\oplus (4i+1) \\oplus (4i+2) \\oplus (4i+3) = 0 $ 回到本题，我们需要计算 $ start \\oplus (start+2) \\oplus (start+4) \\oplus \\cdots \\oplus (start+2(n-1)) $，观察公式可以知道每一项奇偶性相同，因此它们的二进制表示中的最低位或者均为1或均为0。 于是我们可以把参与运算的数的二进制位的最低位提取出来单独处理。当且仅当start为奇数且n也为奇数时，结果才为奇数，即最低位为1。令 $ e = n \\oplus start \\oplus 1 $。 此时不考虑start的最后一位，我们将start右移一位，令 $ s = \\lfloor \\frac{start}{2} \\rfloor $，公式转化为 $ s \\oplus (s+1) \\oplus (s+2) \\oplus \\cdots \\oplus (s+n-1) + e $。 这样我们可以自定义函数sumXor(x)来计算 $ 0 \\oplus 1 \\oplus 2 \\oplus \\cdots \\oplus x $，根据上面异或运算的推导性质第4条，可以得出如下结论： $ 当x=4i + 0,i \\in \\mathbb{Z}时，sumXor(x) = x $ $ 当x=4i + 1,i \\in \\mathbb{Z}时，sumXor(x) = (x-1) \\oplus x = 1 $ $ 当x=4i + 2,i \\in \\mathbb{Z}时，sumXor(x) = (x-2) \\oplus (x-1) \\oplus x = x + 1 $ $ 当x=4i + 3,i \\in \\mathbb{Z}时，sumXor(x) = 0 $ 所以，最终结果为 $ [(sumXor(s+n-1) \\oplus sumXor(s-1)) \\times 2] \\oplus e $。 ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:2:1","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":["位运算","力扣"],"content":"代码 class Solution { public: int xorOperation(int n, int start) { int s = start \u003e\u003e 1; int e = n \u0026 start \u0026 1; int ret = sumXor(s - 1) ^ sumXor(s + n - 1); return (ret \u003c\u003c 1) | e; } int sumXor(int x) { if (x % 4 == 0) return x; else if (x % 4 == 1) return 1; else if (x % 4 == 2) return x + 1; return 0; } }; ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:2:2","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":["位运算","力扣"],"content":"复杂度分析 时间复杂度：$ O(1) $ 空间复杂度：$ O(1) $ ","date":"2021-05-07","objectID":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/:2:3","series":null,"tags":["位运算","力扣"],"title":"力扣 1486 数组异或操作","uri":"/posts/%E5%8A%9B%E6%89%A3-1486-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/"},{"categories":[],"content":"Windows AnyDesk：远程桌面软件。 Bandizip：压缩文件管理工具。 Everything：基于名称快速定位文件和文件夹。 Potplayer：多媒体播放器。 Revo Uninstaller：软件卸载和清除管理器。 MobaXterm：远程连接管理器。 Visual Studio Code：代码编辑器。 JetBrains Toolbox：JetBrains IDE 管理器。 Visual Studio：C++、C# 开发IDE。 Microsoft Store Windows Terminal QuickLook Files ModernFlyouts (Preview) IrfanView64 TranslucentTB Mac ","date":"2021-04-27","objectID":"/posts/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/:0:0","series":null,"tags":[],"title":"常用软件","uri":"/posts/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"categories":[],"content":"Chrome 网上应用店（需要科学上网） uBlock Origin：广告过滤 沙拉查词-聚合词典划词翻译 Imagus：鼠标悬停在图片上自动放大图片 Chrono下载管理器：可嗅探网页资源 Free Download Manager：配合 FDM 使用 Tampermonkey：油猴，脚本下载：Greasy Fork Bitwarden - 免费密码管理器：全平台同步密码管理器 Augmented Steam：查看 Steam 各区价格及史低价格 TabFloater: Picture-in-Picture for any tab!：让标签页变为“画中画”模式 ","date":"2021-04-27","objectID":"/posts/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/:1:0","series":null,"tags":[],"title":"常用软件","uri":"/posts/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"categories":[],"content":"Edge 外接程序 BETA uBlock Origin 沙拉查词-聚合词典划词翻译 Tampermonkey Bitwarden - 免费密码管理器 Augmented Steam Edge 浏览器也可到 Chrome 网上应用店安装扩展。 ","date":"2021-04-27","objectID":"/posts/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/:2:0","series":null,"tags":[],"title":"常用软件","uri":"/posts/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"categories":[],"content":"从 YouTube 和其他视频网站下载视频的命令行程序。 ","date":"2021-04-16","objectID":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":[],"title":"youtube-dl 使用教程","uri":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"一、介绍 官网 Github ","date":"2021-04-16","objectID":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"youtube-dl 使用教程","uri":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"二、安装 Windows: 下载exe，然后添加环境变量。 pip install --upgrade youtube-dl # 列出帮助菜单 youtube-dl -h/--help # 查看版本 youtube-dl --version # 升级 youtube-dl -U/--update ","date":"2021-04-16","objectID":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"youtube-dl 使用教程","uri":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"三、使用 # 列出所有清晰度和格式 youtube-dl -F/--list-formats \u003cURL\u003e # 下载对应格式或清晰度 youtube-dl -f/--format \u003cFORMAT\u003e \u003cURL\u003e # 下载后视频和音频合并 youtube-dl -f XXX+YYY \u003cURL\u003e # 下载最佳质量 youtube-dl -f bestvideo+bestaudio \u003cURL\u003e # 列出所有字幕 youtube-dl --list-subs \u003cURL\u003e # 下载英文（en）字幕，格式为 srt youtube-dl --sub-lang en --write-auto-sub --sub-format srt --skip-download \u003cURL\u003e # 代理 youtube-dl --proxy \u003cURL\u003e # cookies youtube-dl --cookies \u003cFILE\u003e # 登录 youtube-dl -u/--username \u003cUSERNAME\u003e youtube-dl -p/--password \u003cPASSWORD\u003e youtube-dl -2/--twofactor \u003cTWOFACTOR\u003e youtube-dl --video-password \u003cPASSWORD\u003e ","date":"2021-04-16","objectID":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":[],"title":"youtube-dl 使用教程","uri":"/posts/youtube-dl-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["Hugo"],"content":"探索 Hugo - DoIt 主题的全部内容和背后的核心概念。 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:0:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"1 网站配置 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:1:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"1.1 基础配置 baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"DoIt\" [params] # DoIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:1:1","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"1.2 完整配置 [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true # # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是否在 RSS 中显示全文内容 rssFullText = false # 目录配置 [params.page.toc] # 是否使用目录 enable = true # 是否保持使用文章前面的静态目录 keepStatic = true # 是否使侧边目录自动折","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:1:2","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"2.网站图标，浏览器配置，网站清单 强烈建议你把： apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在/static目录，利用 RealFaviconGenerator 可以很容易地生成这些文件。 可以自定义browserconfig.xml和site.webmanifest文件来设置 theme-color 和 background-color。 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:2:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"3.自定义样式 需使用 Hugo extended 版本 通过自定义.scss样式文件，LoveIt 主题支持自定义的样式。 包含自定义.scss样式文件的路径为assets/css。 在assets/css/_override.scss中，你可以覆盖themes/LoveIt/assets/css/_variables.scss中的变量以自定义样式。 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在assets/css/_custom.scss中，你可以添加一些 CSS 样式代码以自定义样式。 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:3:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"4.多语言和 i18n Hugo 配置多语言支持 一个支持英语和中文的网站配置： # [en, zh-cn, fr, pl, ...] 默认语言 defaultContentLanguage = \"zh-cn\" [languages] # 英语 [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 # 中文 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 然后，对于每个新页面，将语言代码附加到文件名中。 单个文件my-page.md需要分为三个文件： 英语：my-page.en.md 中文：my-page.zh-cn.md 也可使用 文章前置参数 来翻译文章。 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:4:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值。 目前提供一些语言的翻译，但你可能自定义其他语言或覆盖默认值。 要覆盖默认值，请在你项目的 i18n 目录i18n/\u003clanguageCode\u003e.toml中创建一个新文件，并从themes/LoveIt/i18n/en.toml中获得提示。 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:4:1","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"5.搜索 基于 Lunr.js 或 algolia，LoveIt 主题支持搜索功能。 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:5:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"5.1 输出配置 为了生成搜索功能所需要的index.json，请在你的网站配置中添加JSON输出文件类型到outputs部分的home字段中。 [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:5:1","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"5.2 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:5:2","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"5.3 比较 lunr：简单，无需同步index.json，没有contentLength的限制，但占用带宽大且性能低（特别是中文需要一个较大的分词依赖库） algolia：高性能并且占用带宽低，但需要同步index.json且有contentLength的限制 文章内容被h2和h3HTML 标签切分来提高查询效果并且基本实现全文搜索。contentLength用来限制h2和h3HTML 标签开头的内容部分的最大长度。 algolia：你需要上传index.json到 algolia 来激活搜索功能，你可以使用浏览器来上传index.json文件。但是一个自动化的脚本可能效果更好，Algolia Atomic 是一个不错的选择。为了兼容 Hugo 的多语言模式，你需要上传不同语言的index.json文件到对应的 algolia index，例如zh-cn/index.json或en/index.json…… ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:5:3","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"6.内容 文本内容组织 保持博客文章存放在content/posts目录，例如：content/posts/我的第一篇文章.md 保持简单的静态页面存放在content目录，例如：content/about.md 本地媒体资源引用 使用页面包中的页面资源。你可以使用适用于Resources.GetMatch的值或者直接使用相对于当前页面目录的文件路径来引用页面资源。 将本地资源放在assets目录中，默认路径是/assets。引用资源的文件路径是相对于assets目录的。 将本地资源放在static目录中，默认路径是/static。引用资源的文件路径是相对于static目录的。 引用的优先级符合以上的顺序。 在这个主题中的很多地方可以使用上面的本地资源引用，例如：链接、图片、image shortcode、music shortcode、和前置参数中的部分参数. 页面资源或者assets目录中的图片处理会在未来的版本中得到支持。 ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:6:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"7.前置参数 只有在文章的参数和你的网站设置中的page部分不一致时才有必要显式设置。 --- title: \"My first blog\" # 标题 subtitle: \"\" # 副标题 date: 2020-03-04T15:58:26+08:00 # 创建日期 lastmod: 2020-03-04T15:58:26+08:00 # 修改日期 draft: true # 是否草稿 author: \"\" # 作者 authorLink: \"\" # 作者链接 description: \"\" # 内容描述 license: \"\" # 文章许可 images: [] # 页面图片,用于 Open Graph 和 Twitter Cards tags: [] # 标签 categories: [] # 分类 featuredImage: \"\" # 特色图片 featuredImagePreview: \"\" # 主页预览的图片 hiddenFromHomePage: false # 是否从主页上隐藏 hiddenFromSearch: false # 是否从搜索中隐藏 twemoji: false # 是否使用 twemoji lightgallery: true # 图片是否按照画廊形式呈现 ruby: true # 是否使用上标注释扩展语法 fraction: true # 是否使用分数扩展语法 fontawesome: true # 是否使用 Font Awesome 扩展语法 linkToMarkdown: true # 页脚是否显示指向原始 Markdown 文件的链接 rssFullText: false # RSS 中是否显示全文内容 toc: # 和 params.page.toc 部分相同 enable: true auto: true code: # 和 params.page.code 部分相同 copy: true # ... math: # 和 params.page.math 部分相同 enable: true # ... mapbox: # 和 params.page.mapbox 部分相同 accessToken: \"\" # ... share: # 和 params.page.share 部分相同 enable: true # ... comment: # 和 params.page.comment 部分相同 enable: true # ... library: # 和 params.page.library 部分相同 css: # someCSS = \"some.css\" # 位于 \"assets/\" # 或者 # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # 位于 \"assets/\" # 或者 # someJS = \"https://cdn.example.com/some.js\" seo: # 和 params.page.seo 部分相同 images: [] # ... --- ","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:7:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":["Hugo"],"content":"8.内容摘要","date":"2021-04-12","objectID":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/:8:0","series":null,"tags":["Hugo"],"title":"Hugo DoIt 主题介绍和配置","uri":"/posts/hugo-doit-%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"categories":[],"content":"You-Get 是一个轻量级命令行工具，可以方便的从一些网站上下载媒体内容（视频、音频、图像）。 ","date":"2021-04-10","objectID":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":[],"title":"You-Get 使用教程","uri":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"一、介绍 官网 Github ","date":"2021-04-10","objectID":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"You-Get 使用教程","uri":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"二、安装 pip install --upgrade you-get ","date":"2021-04-10","objectID":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"You-Get 使用教程","uri":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"三、使用 # 查看所有可选质量与格式 you-get -i/--info \u003cURL\u003e # 自定义下载文件路径和名称 you-get -o/--output-dir \u003cPATH\u003e \u003cURL\u003e you-get -O/--output-filename \u003cFILENAME\u003e \u003cURL\u003e # 代理 you-get -x/--http-proxy \u003cPROXY_IP:PORT\u003e \u003cURL\u003e # cookies you-get --cookies/-c \u003ccookies.txt/cookies.sqlite\u003e \u003cURL\u003e ","date":"2021-04-10","objectID":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":[],"title":"You-Get 使用教程","uri":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"3.1 cookie 获取 Chrome 扩展程序：Get cookies.txt ","date":"2021-04-10","objectID":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:1","series":null,"tags":[],"title":"You-Get 使用教程","uri":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"四、支持网站 YouTube bilibili ","date":"2021-04-10","objectID":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:4:0","series":null,"tags":[],"title":"You-Get 使用教程","uri":"/posts/you-get-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"FFmpeg 是视频处理最常用的开源软件。 ","date":"2021-04-10","objectID":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":[],"title":"FFmpeg 使用教程","uri":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"常用参数 -c：指定编码器。-c copy：直接复制，不重新编码，加快生成速度 -c:v或-vcodec：指定视频编码器。-c:v copy或-vcodec copy：不改变视频编码，直接拷贝 -c:a或-acodec：指定音频编码器。-c:a copy或-acodec copy：不改变音频编码，直接拷贝 -i：指定输入文件 -an：去除音频流 -vn：去除视频流 -preset：指定输出的视频质量，会影响生成速度。可用值：ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow -y：不经过确认，输出时直接覆盖同名文件 -hwaccel cuvid：指定使用 cuvid 硬件加速 举例： ffmpeg -y -c:a libfdk_aac -c:v libx264 -i input.mp4 -c:a libvorbis -c:v libvpx-vp9 output.webm ","date":"2021-04-10","objectID":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"FFmpeg 使用教程","uri":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"格式转换 ffmpeg -i input.webm output.mp4 ","date":"2021-04-10","objectID":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"FFmpeg 使用教程","uri":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"提取视频中的音频 ffmpeg -i input.mp4 -vn -acodec copy output.aac ","date":"2021-04-10","objectID":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":[],"title":"FFmpeg 使用教程","uri":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"去除视频中的音频 ffmpeg -i input.mp4 -an -vcodec copy output.mp4 ","date":"2021-04-10","objectID":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:4:0","series":null,"tags":[],"title":"FFmpeg 使用教程","uri":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"合并音频和视频 视频不包含音频： ffmpeg -i video.mp4 -i audio.aac -c:v copy -c:a copy -strict experimental output.mp4 视频包含音频，需要被替换： ffmpeg -i video.mp4 -i audio.aac -c:v copy -c:a copy -strict experimental -map 0:v:0 -map 1:a:0 output.mp4 ","date":"2021-04-10","objectID":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:5:0","series":null,"tags":[],"title":"FFmpeg 使用教程","uri":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"视频截图 在第 4.5s 截取一帧图片 ffmpeg -i input.mp4 -ss 4.5 -vframes 1 output.png 在第 4.5s 截取 10 帧图片 ffmpeg -i input.mp4 -ss 4.5 -vframes 10 output%d.png ","date":"2021-04-10","objectID":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:6:0","series":null,"tags":[],"title":"FFmpeg 使用教程","uri":"/posts/ffmpeg-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["二分查找","力扣"],"content":"题目链接 ","date":"2021-03-30","objectID":"/posts/%E5%8A%9B%E6%89%A3-0074-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/:0:0","series":null,"tags":["二分查找","力扣"],"title":"力扣 0074 搜索二维矩阵","uri":"/posts/%E5%8A%9B%E6%89%A3-0074-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"},{"categories":["二分查找","力扣"],"content":"方法一：两次二分查找 易知： 每行升序 每列升序 所以，我们可以对矩阵的第一列的元素二分查找，找到最后一个不大于目标值的元素，然后在该元素所在行中二分查找目标值是否存在。 class Solution { public: bool searchMatrix(vector\u003cvector\u003cint\u003e\u003e matrix, int target) { auto row = upper_bound(matrix.begin(), matrix.end(), target, [](const int b, const vector\u003cint\u003e \u0026a) { return b \u003c a[0]; }); if (row == matrix.begin()) { return false; } --row; return binary_search(row-\u003ebegin(), row-\u003eend(), target); } }; class Solution { public boolean searchMatrix(int[][] matrix, int target) { int rowIndex = binarySearchFirstColumn(matrix, target); if (rowIndex \u003c 0) { return false; } return binarySearchRow(matrix[rowIndex], target); } public int binarySearchFirstColumn(int[][] matrix, int target) { int low = -1, high = matrix.length - 1; while (low \u003c high) { int mid = (high - low + 1) / 2 + low; if (matrix[mid][0] \u003c= target) { low = mid; } else { high = mid - 1; } } return low; } public boolean binarySearchRow(int[] row, int target) { int low = 0, high = row.length - 1; while (low \u003c= high) { int mid = (high - low) / 2 + low; if (row[mid] == target) { return true; } else if (row[mid] \u003e target) { high = mid - 1; } else { low = mid + 1; } } return false; } } int binarySearchFirstColumn(int** matrix, int matrixSize, int target) { int low = -1, high = matrixSize - 1; while (low \u003c high) { int mid = (high - low + 1) / 2 + low; if (matrix[mid][0] \u003c= target) { low = mid; } else { high = mid - 1; } } return low; } bool binarySearchRow(int* row, int rowSize, int target) { int low = 0, high = rowSize - 1; while (low \u003c= high) { int mid = (high - low) / 2 + low; if (row[mid] == target) { return true; } else if (row[mid] \u003e target) { high = mid - 1; } else { low = mid + 1; } } return false; } bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) { int rowIndex = binarySearchFirstColumn(matrix, matrixSize, target); if (rowIndex \u003c 0) { return false; } return binarySearchRow(matrix[rowIndex], matrixColSize[rowIndex], target); } var searchMatrix = function(matrix, target) { const rowIndex = binarySearchFirstColumn(matrix, target); if (rowIndex \u003c 0) { return false; } return binarySearchRow(matrix[rowIndex], target); }; const binarySearchFirstColumn = (matrix, target) =\u003e { let low = -1, high = matrix.length - 1; while (low \u003c high) { const mid = Math.floor((high - low + 1) / 2) + low; if (matrix[mid][0] \u003c= target) { low = mid; } else { high = mid - 1; } } return low; } const binarySearchRow = (row, target) =\u003e { let low = 0, high = row.length - 1; while (low \u003c= high) { const mid = Math.floor((high - low) / 2) + low; if (row[mid] == target) { return true; } else if (row[mid] \u003e target) { high = mid - 1; } else { low = mid + 1; } } return false; } func searchMatrix(matrix [][]int, target int) bool { row := sort.Search(len(matrix), func(i int) bool { return matrix[i][0] \u003e target }) - 1 if row \u003c 0 { return false } col := sort.SearchInts(matrix[row], target) return col \u003c len(matrix[row]) \u0026\u0026 matrix[row][col] == target } 时间复杂度：$ O(\\log m + \\log n)=O(\\log mn) $ ","date":"2021-03-30","objectID":"/posts/%E5%8A%9B%E6%89%A3-0074-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/:1:0","series":null,"tags":["二分查找","力扣"],"title":"力扣 0074 搜索二维矩阵","uri":"/posts/%E5%8A%9B%E6%89%A3-0074-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"},{"categories":["二分查找","力扣"],"content":"方法二：一次二分查找 根据特性可将二维数组看作一维的升序数组，再使用二分搜索查找。（要求二维数组每行元素个数相等） class Solution { public: bool searchMatrix(vector\u003cvector\u003cint\u003e\u003e\u0026 matrix, int target) { int m = matrix.size(), n = matrix[0].size(); int low = 0, high = m * n - 1; while (low \u003c= high) { int mid = (high - low) / 2 + low; int x = matrix[mid / n][mid % n]; // 中位数映射到行和列 if (x \u003c target) { low = mid + 1; } else if (x \u003e target) { high = mid - 1; } else { return true; } } return false; } }; class Solution { public boolean searchMatrix(int[][] matrix, int target) { int m = matrix.length, n = matrix[0].length; int low = 0, high = m * n - 1; while (low \u003c= high) { int mid = (high - low) / 2 + low; int x = matrix[mid / n][mid % n]; if (x \u003c target) { low = mid + 1; } else if (x \u003e target) { high = mid - 1; } else { return true; } } return false; } } bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) { int m = matrixSize, n = matrixColSize[0]; int low = 0, high = m * n - 1; while (low \u003c= high) { int mid = (high - low) / 2 + low; int x = matrix[mid / n][mid % n]; if (x \u003c target) { low = mid + 1; } else if (x \u003e target) { high = mid - 1; } else { return true; } } return false; } var searchMatrix = function(matrix, target) { const m = matrix.length, n = matrix[0].length; let low = 0, high = m * n - 1; while (low \u003c= high) { const mid = Math.floor((high - low) / 2) + low; const x = matrix[Math.floor(mid / n)][mid % n]; if (x \u003c target) { low = mid + 1; } else if (x \u003e target) { high = mid - 1; } else { return true; } } return false; }; func searchMatrix(matrix [][]int, target int) bool { m, n := len(matrix), len(matrix[0]) i := sort.Search(m*n, func(i int) bool { return matrix[i/n][i%n] \u003e= target }) return i \u003c m*n \u0026\u0026 matrix[i/n][i%n] == target } 时间复杂度：$ O(\\log mn) $ ","date":"2021-03-30","objectID":"/posts/%E5%8A%9B%E6%89%A3-0074-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/:2:0","series":null,"tags":["二分查找","力扣"],"title":"力扣 0074 搜索二维矩阵","uri":"/posts/%E5%8A%9B%E6%89%A3-0074-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"},{"categories":[],"content":"规则 [abc]a 或 b 或 c ","date":"2021-03-30","objectID":"/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"正则表达式教程","uri":"/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"常用正则表达式 整数：^-?\\d+$ 自然数（非负整数）：^\\d+$ 正整数：^[0-9]*[1-9][0-9]*$ 非正整数：^((-\\d+) ?(0+))$ 负整数：^-[0-9]*[1-9][0-9]*$ 浮点数：^(-?\\d+)(\\.\\d+)?$ 非负浮点数：^\\d+(\\.\\d+)?$ 正浮点数：^(([0-9]+\\.[0-9]*[1-9][0-9]*) ?([0-9]*[1-9][0-9]*\\.[0-9]+) ?([0-9]*[1-9][0-9]*))$ 非正浮点数：^((-\\d+(\\.\\d+)?) ?(0+(\\.0+)?))$ 负浮点数：^(-(([0-9]+\\.[0-9]*[1-9][0-9]*) ?([0-9]*[1-9][0-9]*\\.[0-9]+) ?([0-9]*[1-9][0-9]*)))$ 下划线、数字和大小写字母：^\\w+$ 数字和大小写字母：^[A-Za-z0-9]+$ 大小写字母：^[A-Za-z]+$ 大写字母：^[A-Z]+$ 小写字母：^[a-z]+$ 中文字符：[\\u4e00-\\u9fa5] 双字节字符：[^\\x00-\\xff]，可以用来计算字符串的长度 空行：\\n[\\s ? ]*\\r，可以用来删除空白行 HTML标记：/ \u003c(.*)\u003e.* \u003c\\/\\1\u003e ? \u003c(.*) \\/\u003e/，仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力 首尾空格：(^\\s*) ?(\\s*$) ^\\s* ?\\s*$，可以用来删除行首行尾的空白字符 规则： ^\\S+[a-z A-Z]$：非空、大小写字母 电子邮件：^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$ \\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)* 网址（URL）：(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$ [a-zA-z]+://[^\\s]* 命名规则（字母开头，长度5-16，允许字母数字下划线）：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 中国座机号码：\\d{3}-\\d{8} ?\\d{4}-\\d{7} QQ号：[1-9][0-9]{4,} 中国邮政编码：[1-9]\\d{5}(?!\\d) 中国身份证：\\d{15} ?\\d{18} IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ ","date":"2021-03-30","objectID":"/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"正则表达式教程","uri":"/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%99%E7%A8%8B/"},{"categories":["位运算","分治法","力扣"],"content":"题目链接 ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:0:0","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"方法一：逐位颠倒 ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:1:0","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"思路 将 n 视作一个长为 32 的二进制串，从低位往高位枚举 n 的每一位，将其倒序添加到翻转结果 rev 中。 代码实现中，每枚举一位就将 n 右移一位，这样当前 n 的最低位就是我们要枚举的比特位。当 n 为 0 时即可结束循环。 需要注意的是，在某些语言（如 Java）中，没有无符号整数类型，因此对 n 的右移操作应使用逻辑右移。 ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:1:1","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"代码 class Solution { public: uint32_t reverseBits(uint32_t n) { uint32_t rev = 0; for (int i = 0; i \u003c 32 \u0026\u0026 n \u003e 0; ++i) { rev |= (n \u0026 1) \u003c\u003c (31 - i); n \u003e\u003e= 1; } return rev; } }; public class Solution { public int reverseBits(int n) { int rev = 0; for (int i = 0; i \u003c 32 \u0026\u0026 n != 0; ++i) { rev |= (n \u0026 1) \u003c\u003c (31 - i); n \u003e\u003e\u003e= 1; } return rev; } } uint32_t reverseBits(uint32_t n) { uint32_t rev = 0; for (int i = 0; i \u003c 32 \u0026\u0026 n \u003e 0; ++i) { rev |= (n \u0026 1) \u003c\u003c (31 - i); n \u003e\u003e= 1; } return rev; } var reverseBits = function(n) { let rev = 0; for (let i = 0; i \u003c 32 \u0026\u0026 n \u003e 0; ++i) { rev |= (n \u0026 1) \u003c\u003c (31 - i); n \u003e\u003e\u003e= 1; } return rev \u003e\u003e\u003e 0; }; func reverseBits(n uint32) (rev uint32) { for i := 0; i \u003c 32 \u0026\u0026 n \u003e 0; i++ { rev |= n \u0026 1 \u003c\u003c (31 - i) n \u003e\u003e= 1 } return } ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:1:2","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"复杂度 时间复杂度：$ O(\\log n) $ 空间复杂度：$ O(1) $ ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:1:3","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"方法二：位运算分治 ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:2:0","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"思路 若要翻转一个二进制串，可以将其均分成左右两部分，对每部分递归执行翻转操作，然后将左半部分拼在右半部分的后面，即完成了翻转。 由于左右两部分的计算方式是相似的，利用位掩码和位移运算，我们可以自底向上地完成这一分治流程。 对于递归的最底层，我们需要交换所有奇偶位： 取出所有奇数位和偶数位； 将奇数位移到偶数位上，偶数位移到奇数位上。 类似地，对于倒数第二层，每两位分一组，按组号取出所有奇数组和偶数组，然后将奇数组移到偶数组上，偶数组移到奇数组上。以此类推。 需要注意的是，在某些语言（如 Java）中，没有无符号整数类型，因此对 n 的右移操作应使用逻辑右移。 ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:2:1","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"代码 class Solution { private: const uint32_t M1 = 0x55555555; // 01010101010101010101010101010101 const uint32_t M2 = 0x33333333; // 00110011001100110011001100110011 const uint32_t M4 = 0x0f0f0f0f; // 00001111000011110000111100001111 const uint32_t M8 = 0x00ff00ff; // 00000000111111110000000011111111 public: uint32_t reverseBits(uint32_t n) { n = n \u003e\u003e 1 \u0026 M1 | (n \u0026 M1) \u003c\u003c 1; n = n \u003e\u003e 2 \u0026 M2 | (n \u0026 M2) \u003c\u003c 2; n = n \u003e\u003e 4 \u0026 M4 | (n \u0026 M4) \u003c\u003c 4; n = n \u003e\u003e 8 \u0026 M8 | (n \u0026 M8) \u003c\u003c 8; return n \u003e\u003e 16 | n \u003c\u003c 16; } }; public class Solution { private static final int M1 = 0x55555555; // 01010101010101010101010101010101 private static final int M2 = 0x33333333; // 00110011001100110011001100110011 private static final int M4 = 0x0f0f0f0f; // 00001111000011110000111100001111 private static final int M8 = 0x00ff00ff; // 00000000111111110000000011111111 public int reverseBits(int n) { n = n \u003e\u003e\u003e 1 \u0026 M1 | (n \u0026 M1) \u003c\u003c 1; n = n \u003e\u003e\u003e 2 \u0026 M2 | (n \u0026 M2) \u003c\u003c 2; n = n \u003e\u003e\u003e 4 \u0026 M4 | (n \u0026 M4) \u003c\u003c 4; n = n \u003e\u003e\u003e 8 \u0026 M8 | (n \u0026 M8) \u003c\u003c 8; return n \u003e\u003e\u003e 16 | n \u003c\u003c 16; } } const uint32_t M1 = 0x55555555; // 01010101010101010101010101010101 const uint32_t M2 = 0x33333333; // 00110011001100110011001100110011 const uint32_t M4 = 0x0f0f0f0f; // 00001111000011110000111100001111 const uint32_t M8 = 0x00ff00ff; // 00000000111111110000000011111111 uint32_t reverseBits(uint32_t n) { n = n \u003e\u003e 1 \u0026 M1 | (n \u0026 M1) \u003c\u003c 1; n = n \u003e\u003e 2 \u0026 M2 | (n \u0026 M2) \u003c\u003c 2; n = n \u003e\u003e 4 \u0026 M4 | (n \u0026 M4) \u003c\u003c 4; n = n \u003e\u003e 8 \u0026 M8 | (n \u0026 M8) \u003c\u003c 8; return n \u003e\u003e 16 | n \u003c\u003c 16; } var reverseBits = function(n) { const M1 = 0x55555555; // 01010101010101010101010101010101 const M2 = 0x33333333; // 00110011001100110011001100110011 const M4 = 0x0f0f0f0f; // 00001111000011110000111100001111 const M8 = 0x00ff00ff; // 00000000111111110000000011111111 n = n \u003e\u003e\u003e 1 \u0026 M1 | (n \u0026 M1) \u003c\u003c 1; n = n \u003e\u003e\u003e 2 \u0026 M2 | (n \u0026 M2) \u003c\u003c 2; n = n \u003e\u003e\u003e 4 \u0026 M4 | (n \u0026 M4) \u003c\u003c 4; n = n \u003e\u003e\u003e 8 \u0026 M8 | (n \u0026 M8) \u003c\u003c 8; return (n \u003e\u003e\u003e 16 | n \u003c\u003c 16) \u003e\u003e\u003e 0; }; const ( m1 = 0x55555555 // 01010101010101010101010101010101 m2 = 0x33333333 // 00110011001100110011001100110011 m4 = 0x0f0f0f0f // 00001111000011110000111100001111 m8 = 0x00ff00ff // 00000000111111110000000011111111 ) func reverseBits(n uint32) uint32 { n = n\u003e\u003e1\u0026m1 | n\u0026m1\u003c\u003c1 n = n\u003e\u003e2\u0026m2 | n\u0026m2\u003c\u003c2 n = n\u003e\u003e4\u0026m4 | n\u0026m4\u003c\u003c4 n = n\u003e\u003e8\u0026m8 | n\u0026m8\u003c\u003c8 return n\u003e\u003e16 | n\u003c\u003c16 } ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:2:2","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["位运算","分治法","力扣"],"content":"复杂度 时间复杂度：$ O(1) $ 空间复杂度：$ O(1) $ ","date":"2021-03-29","objectID":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/:2:3","series":null,"tags":["位运算","分治法","力扣"],"title":"力扣 0190 颠倒二进制位","uri":"/posts/%E5%8A%9B%E6%89%A3-0190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"},{"categories":["饥荒"],"content":"等级 25级后开启制造减半后制造 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:1:0","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"食谱 名称 代码 时间 保质期 饥饿、san、生命 制作 效果 百奇 sorapocky 0s ∞ 37.5、20、20 浆果×6+鸡蛋×0/1/2+蜂蜜×0/1/4 速食拉面 sora_tongmian 1.6s 20d 100/70/40、10、-5 （肉度+菜度）≥2.5 喷香蛋包饭 sora_danbaofan 16s 15d 80/56/32、10、40 蛋≥1+菜度≥0.5+肉度≥0.5 可2怪物肉 默认不放树枝。 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:2:0","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"药剂 名称 代码 制作 效果 公正 sora2gz 暖石×2+灰烬×40 恒定温度（15min） 诚实 sora2cs 荧光果×40+草×40+树枝×40 持续发光（15min） 谦卑 sora2qb 蜘蛛腺体×40 生命+40、生命+5/s（5min） 灵魂 sora2lh 灰烬×40+金块×20+莎草纸×10 san+40、san+5/s（5min） 荣誉 sora2ry 蜘蛛网×10+黑色羽毛×3+红色羽毛×3 移动速度+100%（5min） 英勇 sora2yy 蜂刺×40+燧石×40 攻击+50%（5min） 牺牲 sora2xs 狗牙×40+木炭×20+格罗姆的粘液×5 攻击+200%、防御-50%、生命-5/s（1min） 怜悯 sora2lm 治疗药膏×10+蜂蜜药膏×10+强心针×5 怪物生命+500/s（3min） 默认一次制作10个药剂 药剂同时只能生效一个，叠加使用会只有最后使用的产生效果 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:3:0","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"装备 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:0","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"奇妙法杖 属性 属性值 代码 sora2sword 位置 手 效果 无耐久、攻击+10、攻击距离+8、移动速度+10% 功能 斧头、鹤嘴锄、铲子（右键开关）、锤子（右键开关）、捕虫网、鱼竿 队友能否使用 能 要求 穹10级 制作 黄金铲子×2/4/6+锤子×2/4/6+紫宝石×1/1/3 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:1","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"神奇法杖 属性 属性值 代码 sora2prop 位置 手 效果 无耐久、攻击+0、攻击距离+0、移动速度+50% 功能 只能攻击队友，将其击飞，掉落其手部装备和身上的金子 队友能否使用 能 要求 穹10级 制作 活木×10/20/30+锤子×0/4/6 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:2","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"银白の锋 属性 属性值 代码 sora3sword 位置 手 效果 无耐久、攻击+59.5、攻击距离+1.25、移动速度+10% 功能 每次攻击回复0.5血量 队友能否使用 能 要求 穹10级 制作 影刀×1/3/5+触手尖刺×2/4/6+蝙蝠棒×1/1/3 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:3","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"银白の甲 属性 属性值 代码 sora2armor 位置 身 效果 耐久2000（缝纫包可修复、归零消失）、防御+85%、移动速度+10% 功能 防水+30%、回san+3/min、作祟可复活（物品消失） 队友能否使用 能 要求 穹10级 制作 木甲×2/4/6+紫宝石×3/5/10+噩梦燃料×5/10/50 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:4","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"银白の盔 属性 属性值 代码 sora2hat 位置 头 效果 耐久2000（缝纫包可修复、归零消失）、防御+85%、移动速度+10% 功能 防水+30%、回san+3/min、作祟可复活（物品消失） 队友能否使用 能 要求 穹10级 制作 猪皮帽×2/4/6+紫宝石×3/5/10+噩梦燃料×5/10/50 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:5","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"银白の翼 属性 属性值 代码 sora2bag 位置 包 效果 14格背包、移动速度+10% 功能 保鲜+50%、回san+3/min 队友能否使用 能 要求 穹10级 制作 冰块×80/200/400+电子元件×10/20/80 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:6","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"荣誉勋章 属性 属性值 代码 sora2amulet 位置 符 效果 移动速度+20%、攻击+20%（穹无效）、防御+20%（穹无效） 功能 防水+30%、回san+3/min、发光（多档调节，不同消耗速度，自动关闭）、 修复 关闭时自动修复0.1/s，也可用荧光果、蜗牛粘液、小发光浆果、发光浆果修复 队友能否使用 能 队友增幅 使用穹的便携烹饪锅、制作穹专属料理、快速采集、快速制作 要求 穹10级 制作 重生护符×1/2/3+寒冰护符×1/2/3+噩梦护符×1/2/3 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:7","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の采 属性 属性值 代码 sorapick 位置 手 效果 无耐久、攻击+10、攻击距离+8、移动速度+25% 功能 灭火、批量采集，CD60s→0s 队友能否使用 不能 要求 穹20级 制作 懒人护符×1/2/4+活木×10/20/40+橙宝石×3/6/10+燧石×40/80/400 升级（冷却时间） 每1/2/3紫宝石，CD-12s，最高提升到0s 升级（采集范围） 每1/2/3橙宝石，范围+1，最高提升到7格 升级（灭火范围） 每10/20/30e，范围+0.5，最高提升到7格 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:8","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の愈 属性 属性值 代码 sorahealing 位置 手 效果 无耐久、攻击+15→35、攻击距离+8、移动速度+25% 功能 右键切换群体治疗或冰冻（消耗饱食度），CD60s，治疗效果30 队友能否使用 不能 要求 穹20级 制作 分解法杖×1/2/4+蜂蜜药膏×10/20/40+绿宝石×3/6/10+花瓣×40/80/400 升级（攻击） 每1/2/3紫宝石，攻击+4，最高提升到35 升级（冷却时间） 每1/2/3黄宝石，CD-10s，最高提升到10s 升级（治疗、冰冻） 每1/2/3绿宝石，治疗+10，最高提升到80（到55后可复活自己或队友） ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:9","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の瞬 属性 属性值 代码 soratele 位置 手 效果 无耐久、攻击+17、攻击距离+12、移动速度+50% 功能 右键瞬移（CD20s，消耗40san），斧、锄、铲、锤、捕虫网、鱼竿（立刻上钩） 队友能否使用 不能 要求 穹20级 制作 瞬移法杖×1/2/4+月石×5/10/40+紫宝石×4/4/10+红色羽毛×4/10/40 升级（冷却时间） 每1/2/3紫宝石，CD-4s，最高提升到0s 升级（施法消耗） 每10/20/30噩梦燃料，消耗san-3，最高提升到10san ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:10","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の空 属性 属性值 代码 soramagic 位置 手 效果 无耐久、攻击+20→45、攻击距离+5→10、移动速度+25% 功能 右键流星群伤技能，伤害20→120，CD30s，攻击有概率触发技能 队友能否使用 不能 要求 穹20级 制作 火焰法杖×1/2+金块×10/20+红宝石×2/6+噩梦燃料×10/20 制作（困难） 火焰法杖4+电子元件×20+红宝石×10+龙鳞×4 升级（攻击） 每5/10/15金块，攻击+0.5，最高提升到45 升级（攻击距离） 每1/2/3金丝雀羽毛，攻击距离+0.2，最高提升到10 升级（技能伤害） 每1/2/3红宝石，伤害+4，最高提升到120 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:11","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の护 属性 属性值 代码 soraclothes 位置 身 效果 防御+75%→85%、耐久500→2000、移动速度+10% 功能 保暖+0→240、回san+4.5/min、每10秒回复1%耐久、满级后免疫火焰伤害 队友能否使用 不能 要求 穹20级 制作 升级（防御） 每1/2/3龙鳞，防御+2%，耐久+300，最高提升到防御+85%，耐久+2000 升级（保暖） 每1/2/3熊皮，保暖+48，最高提升到240 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:12","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の冠 属性 属性值 代码 sorahat 位置 头 效果 防御+75%→85%、耐久500→2000、移动速度+10% 功能 防雨+0→100%（满级防水）、回san+4.5/min、每10秒回复1%耐久、满级后免疫火焰伤害 队友能否使用 不能 要求 穹20级 制作 升级（防御） 每1/2/3龙鳞，防御+2%，耐久+300，最高提升到防御+85%，耐久+2000 升级（防雨） 每1/2/3巨鹿眼球，防雨+40%，最高提升到100% ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:13","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の包 属性 属性值 代码 sorabag 位置 包 效果 14格背包、出生自带、移动速度+10% 功能 保鲜（默认50%）、回san、隔热 队友能否使用 不能 要求 穹20级 制作 鸭毛×5/10+牛毛×6/20+蜘蛛网×8/20 制作（困难） 鸭毛×40+黑色羽毛×20+红色羽毛×20+紫宝石×4 升级（保鲜） 每5/10/15金块，保鲜度+10%，最高提升500% 升级（回san） 每5/10/15蜂蜜，回san+1/min，最高提升到20/min 升级（隔热） 每5/10/15冰块，隔热+4，最高提升240 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:14","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の二次元蝴蝶结 属性 属性值 代码 sorabowkno 位置 符 效果 攻击+20%、防御+20%、移动速度+20% 功能 防水+30%、回san+4.5/min、发光、消耗经验打包物品作礼物 队友能否使用 不能 要求 穹20级 制作 蝴蝶×10/20/20+格罗姆翅膀×3/5/10+彩虹宝石×1/2/4 升级（发光） 每5/10/15荧光果/萤火虫/发光浆果，发光范围+0.5格，最高提升5格 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:4:15","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"物品 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:5:0","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の缝纫包 属性 属性值 代码 sorarepairer 功能 重置食物新鲜度、修复装备（除了分解法杖） 制作 蜘蛛网×4/6/10+金块×1/2/3 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:5:1","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の打包纸 属性 属性值 代码 sora2pack 功能 一次制作6个（一般难度），打包建筑、植物、物品等。 要求 穹10级 制作 莎草纸×4/6/10+紫宝石×1+花瓣×10/20/60 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:5:2","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"魔法 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:6:0","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"全部魔法 名称 代码 消耗san 效果 鸽子还没到 sora_birds 20/30/40 召唤一群鸟（20-30只） 未闻花名 sora_gardening 20/30/40 催生附近作物（包括大理石树） 提醒睡觉小助手 sora_sleep 40/50/60 催眠附近生物 都是时辰的错 sora_raining 70/90/110 下雨或天晴 空白永不败北 sora_magics 120/140/160 附近物品变化，按物品12或123循环变化 超电磁炮永世长存 sora_lighting 30/40/50 附近召唤闪电 伪典-弑君者 sora_tentacles 50/70/90 附近召唤三只触手 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:6:1","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"空白永不败北 物品1 物品2 物品3 浆果 蜜汁浆果 蝴蝶翅膀 黄油 青蛙腿 鸟腿 花瓣 恶魔花瓣 肥料 鸟粪 石头 燧石 硝石 冰 木炭 金子 金元宝 骨片 化石碎片 月石 月亮碎片 红宝石 蓝宝石 紫宝石 绿宝石 黄宝石 橙宝石 蓝色羽毛 黑色羽毛 红色羽毛 兔毛 猪皮 触手皮 蜘蛛腺体 蚊子血袋 蜂刺 狗牙 牛毛 蜘蛛网 牛角 海象牙 羊角 龙鳞 蛤蟆皮 蝴蝶 月娥 常青树 粗壮常青树 石化树 胡萝卜（地里） 胡萝卜鼠（地里） 曼德拉草（地里） 浆果丛 浆果灌木丛 蜜汁浆果丛 树苗根 月岛树苗根 红蘑菇（树） 蓝蘑菇（树） 绿蘑菇（树） 洋葱 辣椒 大蒜 蒜粉 辣椒面 月相盘 月台 棋盘地板 卵石路 地毯地板 贝壳地板 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:6:2","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"建筑 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:0","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"穹の圣诞树 属性 属性值 代码 sora2tree 要求 穹5级 功能 每天可随机领取物品 制作 木板×1/5/20+松果×1/10/40+桦木果×1/10/40 升级机制：往圣诞树里放东西，点击献祭（手柄关闭后就会自动献祭），献祭会增加经验值，达到一定经验值后树就会升级，不同的物品经验值也不同，但是不需要太在意升级因为献祭获得的经验和获得礼物而扣除的经验不成正比（一根草每天白嫖不香吗），所以应该把他当做垃圾桶更合适（小声bb） ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:1","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"薇诺娜的投石机 属性 属性值 代码 功能 敲除掉落1个可靠的胶带 要求 穹10级 制作 穹の缝纫包×2+树枝×3+石砖×3 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:2","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"薇诺娜的聚光灯 属性 属性值 代码 功能 敲除掉落1个可靠的胶带 要求 穹10级 制作 穹の缝纫包×2+树枝×3+石砖×3 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:3","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"薇诺娜的发电机 属性 属性值 代码 功能 敲除掉落1个可靠的胶带 要求 穹10级 制作 穹の缝纫包×2+木头×2+硝石×2 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:4","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"秘法祭坛 属性 属性值 代码 sora2base 要求 制作（简单） 红月之眼+蓝月之眼+月石×6 制作（一般） 紫月之眼×2+黄月之眼×2+月石×20 制作（困难） 绿月之眼×3+橙月之眼×3+月石×40 火魔杖 自动攻击 冰魔杖 灭火器 传送魔杖 作为传送石的目的地 瞬移魔杖 消耗饥饿回san 解构魔杖 消耗饥饿回血 唤星者 大范围升温 访月者 大范围降温 魔杖放置在祭坛的第一格 若第二格不是噩梦燃料，则会提供大范围光源 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:5","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"传送石 属性 属性值 代码 sora2stone 要求 制作 金块×2+沙漠石头×0/1/1+月石×0/0/2 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:6","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"强迫の箱子 属性 属性值 代码 sora2chest 功能 25格容器，关闭时自动收集附近与第一格相同的物品，其他物品掉落（打包除外） 要求 穹10级 制作 木板×3/3/5+石砖×0/3/5+噩梦燃料×0/0/2 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:7","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"寒冰の箱子 属性 属性值 代码 sora2ice 功能 25格容器，永久保鲜 要求 穹10级 制作（简单） 冰块×80+木板×10+石砖×10 制作 蓝宝石×6/20+木板×20/40+石砖×20/40 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:8","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":["饥荒"],"content":"烈焰の箱子 属性 属性值 代码 sora2fire 功能 25格容器，烤熟食物，木头变木炭，可燃物变灰烬 要求 穹10级 制作（简单） 木炭×80+木板×10+石砖×10 制作 红宝石×6/20+木板×20/40+石砖×20/40 ","date":"2021-03-28","objectID":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/:7:9","series":null,"tags":["饥荒"],"title":"饥荒MOD小穹","uri":"/posts/%E9%A5%A5%E8%8D%92mod%E5%B0%8F%E7%A9%B9/"},{"categories":[],"content":"一、工具 U盘（≥16G） Mac OS镜像（.dmg） 适合你的电脑的EFI文件 balenaEtcher（刻录工具） DiskGenius（分区工具） ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"二、制作U盘启动盘 插入U盘，然后打开balenaEtcher软件。 点击Select image选择Mac OS镜像。 软件会自动识别出你的U盘，最后点击Flash!。 等待刻录完成（20min左右），之后会有一个完整性检测（15min左右）。 当软件显示Flash Complete!时表示刻录成功。 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"三、配置Clover引导驱动 打开DiskGenius，找到U盘上的ESP分区，删除EFI文件夹。 把适合自己电脑EFI文件夹复制进去。（这里只能用快捷键复制粘贴） 保存更改。 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"四、制作黑苹果系统盘 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:4:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"硬盘分区安装 压缩卷（≥25G）。 选中压缩出的空闲分区，右键新建简单卷，一直点击下一步但选择不要格式化这个卷。 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:4:1","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"整块硬盘安装 删除磁盘所有分区即可。 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:4:2","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"五、BIOS设置 以技嘉（Gigabyte）主板为例： BIOS-\u003eFastBoot-\u003eDisable BIOS-\u003eWindows 8/10 Features-\u003eWindows 8/10 将操作系统类型设置为其他操作系统。从不支持Microsoft签名安全启动的第三方操作系统启动时，将“操作系统类型”设置为“其他操作系统”以获取优化的功能。 BIOS-\u003eCSM Support-\u003eDisabled 禁用CSM。兼容性支持模块（CSM）是UEFI固件的组件，该组件通过模拟BIOS环境来提供旧版BIOS兼容性，从而允许仍使用旧版操作系统和某些不支持UEFI的选件ROM。Clover和OpenCore引导都支持UEFI引导。禁用CSM使BIOS可以轻松发现Bootloader。 BIOS-\u003eLAN PXE Boot Option ROM-\u003eDisabled BIOS-\u003eStorage Boot Option Control-\u003eUEFI BIOS-\u003eOther PCI devices-\u003eUEFI Peripherals-\u003eInitial Display Output-\u003ePCIe Slot(独显)/IGFX(核显) Peripherals-\u003eAbove 4G Decoding-\u003eDisabled Peripherals-\u003eTrusted Computing-\u003eSecurity Device Support-\u003eDisable Peripherals-\u003eUSB Configuration-\u003eLegacy USB Support-\u003eDisabled 禁用旧版USB支持。 Peripherals-\u003eUSB Configuration-\u003eXHCI Hand-off-\u003eEnabled 启用XHCI切换。 Peripherals-\u003eNetwork Stack Configuration-\u003eDisabled Peripherals-\u003eSATA and RST Configuration-\u003eSATA Mode Selection-\u003eAHCI 将SATA设置为AHCI。通过高级主机控制器接口（AHCI）模式，可以在SATA驱动器上使用高级功能，例如热插拔和本机命令队列（NCQ）。AHCI还允许硬盘以比传统IDE模式更高的速度运行。 Chipset-\u003eVT-d-\u003eDisabled 禁用VT-D。VT-d特别是IOMMU规范。扩展允许您访问虚拟机下的物理硬件（例如，运行Linux的系统可以在虚拟机上运行Windows。如果没有VT-d，则视频卡会被仿真，并且游戏速度会很慢。视频卡可以进入直通模式，并且可以在Windows下作为真实硬件（可以安装nvidia驱动程序）进行访问，并且视频卡的性能类似于运行本机Windows实时预览的情况。但是对于许多黑苹果用户，VT-D不会造成任何问题，但是如果您是新手，则尝试安装和配置Hackintosh禁用VT-D并安装。您可以在安装后根据需要启用VT-D。 Chipset-\u003eIOAPIC 24-119 Entries-\u003eEnabled ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:5:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"六、黑苹果安装 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:6:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"七、更改硬盘启动 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:7:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"八、其他问题 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:8:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"EFI分区扩容 分出合适空间大小，可使用Windows自带的磁盘管理或者DiskGenius。 打开DiskGenius。 找到ESP分区，右键选择备份分区到镜像文件，选择合适的文件路径并保存（选择热备份）。 删除ESP分区。 在任意分区上右键选择建立ESP/MSR分区，调整合适的分区大小并确认。 保存更改。 找到ESP分区，右键选择从镜像文件还原分区，选择刚才备份的镜像文件即可。 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:8:1","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"九、参考 黑果小兵的部落阁 黑苹果MacOS Big Sur 11.0 安装教程及驱动工具 主流电脑配置的通用引导文件，包含CLOVER与OpenCorer双引导 ","date":"2021-03-28","objectID":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:9:0","series":null,"tags":[],"title":"黑苹果安装教程","uri":"/posts/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":["环境","配置"],"content":"常用软件或编程语言环境搭建及个性化配置。 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:0:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"Windows 添加环境变量 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:1:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"窗口化操作 打开我的电脑，右键点击左侧的此电脑，点击属性。 点击最下方的高级系统设置，然后点击环境变量。 修改系统变量：下方选择需要修改的变量，点击编辑，然后新建或者编辑变量。 新建系统变量：直接点击新建，输入变量名和变量值，然后确定。 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:1:1","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"误删系统环境变量的补救措施 若未关闭当前CMD。输入echo %PATH%会显示原来的 PATH 值。 若已关闭当前CMD。每个正在运行的 Windows 程序都会有自己已加载的 PATH，可以使用Process Explorer来查看当前正在运行的程序的环境变量。例如：如果你之前打开了 Chrome，且一直未关闭，按Ctrl+O打开C:\\Windows\\System32\\cmd.exe，然后输入echo %PATH%会显示原来的 PATH 值。恢复之后删除C:\\Program Files\\Google\\Chrome\\Application和用户变量中的PATH值即可。 若已重启电脑。手动恢复 PATH 到默认值%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0，其他值已丢失。 参考：如何恢复我删除的Path环境变量？ ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:1:2","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"VS Code Visual Studio Code 官网 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:2:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"1. C++ 安装编译器 Windows（二选一） 安装 Visual Studio 安装 MinGW-w64，推荐从 SourceForge 下载安装。 Linux: sudo apt install gcc g++ gdb build-essential Mac OS: xcode-select --install 安装 VS Code C/C++ 扩展ms-vscode.cpptools。 asd 解决头文件找不到 修改c_cpp_properties.json Linux：gcc -v -E -x c++ - Windows 10 + Visual Studio 2019 { \"configurations\": [ { \"name\": \"Win32\", \"includePath\": [ \"${workspaceFolder}/**\", \"C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/include/**\" ], \"defines\": [ \"_DEBUG\", \"UNICODE\", \"_UNICODE\" ], \"compilerPath\": \"C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe\", \"cStandard\": \"c17\", \"cppStandard\": \"c++17\", \"intelliSenseMode\": \"windows-msvc-x64\" } ], \"version\": 4 } Windows 10 + Mingw-w64 { \"configurations\": [ { \"name\": \"Win32\", \"includePath\": [ \"${workspaceFolder}/**\", \"C:/Portable/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/**\", \"C:/Portable/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/**\" ], \"defines\": [ \"_DEBUG\", \"UNICODE\", \"_UNICODE\" ], \"compilerPath\": \"C:/Portable/mingw64/bin/g++.exe\", \"cStandard\": \"c17\", \"cppStandard\": \"c++17\", \"intelliSenseMode\": \"gcc-x64\" } ], \"version\": 4 } 打开设置。 C_Cpp: Clang_format_fallback Style设为{BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4} C_Cpp › Default: Cpp Standard设为`` C_Cpp › Default: C Standard设为`` 参考 关闭 Windows Defender “首次看到时阻止”： 问题描述： 编译运行程序的时候总是弹出一个 Microsoft Defender 防病毒程序窗口，提示“需要扫描当前程序”。 解决方法： 按Win+R，输入gpedit.msc，打开本地组策略编辑器。 左侧选择计算机配置-\u003e管理模板-\u003eWindows 组件-Microsoft Defender 防病毒-\u003eMAPS。 右侧双击配置“首次看到时阻止”功能，选择已禁用，然后点击确定，保存退出。 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:2:1","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"Python 建议安装3.8版本 Python 官网 Miniconda 官网 Anaconda 官网 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:3:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"pip 设置代理 Windows：%APPDATA%\\pip\\pip.ini [global] proxy = http://user:password@proxy_name:port ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:3:1","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"Conda 常用命令 更新：conda update 查看环境：conda env list或conda info -e 创建环境：conda create -n \u003cENVNAME\u003e python=3.X -y 删除环境：conda remove -n \u003cENVNAME\u003e --all -y 设置代理：conda config --set proxy_servers.http http://127.0.0.1:10809 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:3:2","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"PyTorch PyTorch 官网 CPU： Anaconda: conda install pytorch torchvision torchaudio cpuonly -c pytorch Pip: pip install torch==1.8.1+cpu torchvision==0.9.1+cpu torchaudio===0.8.1 -f https://download.pytorch.org/whl/torch_stable.html GPU (CUDA 11.0)： Anaconda: conda install pytorch torchvision torchaudio cudatoolkit=11.0 -c pytorch Pip: pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio===0.7.2 -f https://download.pytorch.org/whl/torch_stable.html 检查是否安装成功： import torch # 检查 pytorch 是否安装成功 print(torch.__version__) # 检查 CUDA 是否可用 print(torch.cuda.is_available()) ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:4:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"TensorFlow TensorFlow 官网 Pip: CPU and GPU: pip install tensorflow Wheel: # https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow_cpu-2.4.0-cp38-cp38-win_amd64.whl pip install tensorflow_cpu-2.4.1-cp38-cp38-win_amd64.whl # CPU # https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-2.4.0-cp38-cp38-win_amd64.whl pip install tensorflow_gpu-2.4.0-cp38-cp38-win_amd64.whl # GPU 检查是否安装成功： import tensorflow as tf # 检查 tensorflow 是否安装成功 print(tf.__version__) # 检查 CUDA 是否可用 # 输出最后一行显示 [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')] print(tf.config.experimental.list_physical_devices('GPU')) ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:5:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"Q\u0026A 问题描述： 安装 CUDA 11.1 + cuDNN 8.1，tensorflow 2.4.1 检查 GPU 时报错： Could not load dynamic library 'cusolver64_10.dll'; dlerror: cusolver64_10.dll not found 解决方案： 卸载重新安装 CUDA 11.0 + cuDNN 8.0，参考 Windows 经过测试的构建配置。 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:5:1","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"CUDA \u0026 cuDNN CUDA 和 cuDNN 版本：Windows 经过测试的构建配置 以笔记本 RTX2060 显卡为例 NVIDIA 驱动程序下载，选择对应版本，下载安装。 CUDA 工具包下载，下载对应版本安装。 在CMD输入nvcc -V，出现如下输出表示安装成功。 nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2020 NVIDIA Corporation Built on Tue_Sep_15_19:12:04_Pacific_Daylight_Time_2020 Cuda compilation tools, release 11.1, V11.1.74 Build cuda_11.1.relgpu_drvr455TC455_06.29069683_0 cuDNN 下载，需要登陆账号，登陆后下载对应版本，解压将bin、include和lib三个文件夹的内容复制到 CUDA 安装目录下。 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:6:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["环境","配置"],"content":"FFmpeg 进入官网，点击Windows builds from gyan.dev。 点击下图链接下载，然后解压，并把bin目录添加环境变量。 重新打开 CMD，输入ffmpeg -version验证安装。 ","date":"2021-03-15","objectID":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:7:0","series":null,"tags":["环境","配置"],"title":"环境搭建","uri":"/posts/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":[],"content":"Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"Git 命令 ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"本地仓库 # 初始化 git init # 查看文件改动 git diff FILENAME # 添加需要 commit 的文件 git add FILENAME # 提交一个版本，附带描述信息 git commit -m \"descriptions\" # 所有被修改或者已删除的文件提交（不包括新建文件） git commit -a -m \"descriptions\" ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:1:1","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"远端仓库 # 克隆仓库 git clone https://github.com/USERNAME/REPONAME.git # 为本地仓库添加远端 GitHub 仓库 git remote add origin https://github.com/USERNAME/REPONAME.git # 将已提交的版本推送到远端仓库，方便其他设备同步 git push origin \u003cBRANCH_NAME\u003e # 取回远端仓库版本，对本地仓库进行更新 git pull ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:1:2","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"分支 # 创建一个分支 git branch \u003cBRANCH_NAME\u003e # 切换分支 git checkout \u003cBRANCH_NAME\u003e # 创建一个分支，并切换过去 git checkout -b \u003cBRANCH_NAME\u003e # 合并分支 git merge \u003cBRANCH_NAME\u003e # 删除分支 git branch -d \u003cBRANCH_NAME\u003e ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:1:3","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"子模块 # 将一个 Git 仓库添加为当前仓库的子模块 git submodule add https://github.com/USERNAME/REPONAME.git # git clone 含有子模块的项目 # 1.项目已经克隆到了本地 git submodule init git sunmodule update # 或者 git submodule update --init # 2.项目还未克隆到本地 git clone --recurse-submodules https://github.com/USERNAME/REPONAME.git # 或者 git clone --recursive https://github.com/USERNAME/REPONAME.git ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:1:4","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"替换本地改动 # 丢弃当前文件修改内容 git checkout -- FILENAME # 丢弃本地仓库的所有改动与提交版本 git fetch origin git reset --hard origin/master ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:1:5","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"本地创建仓库并上传至 GitHub 配置 Git。 git bash 输入如下指令： git init git add --all # git add . git commit -m \"descriptions\" git remote add origin https://github.com/USERNAME/REPONAME.git git push -u origin master ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:1:6","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"配置 Git 将your_email@youremail.com改为你的 Github 账号的邮箱，然后一路回车。 ssh-keygen -t rsa -C \"your_email@youremail.com\" 成功的话会在${USERNAME}/下生成.ssh文件夹，进入该文件夹，打开id_rsa.pub文件，复制里面的内容。 回到 Github 网页，登录，点击右上角头像，选择Settings-\u003eSSH and GPG keys-\u003eNew SSH key，Title随便填，Key粘贴你刚复制的内容，然后点击Add SSH key。 测试，git bash 输入如下指令： ssh -T git@github.com 配置用户名和邮箱： git config --global user.name \"USERNAME\" git config --global user.email \"username@email.com\" ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"Q\u0026A ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"无法连接服务器，报错443 问题： git clone 或 git push 等操作时无法连接至服务器，报错内容如下： SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 答案： 该问题由开启代理软件导致。 到设置-\u003e网络和Internet-\u003e代理中查看地址和端口。 git bash 中输入如下命令（IP_ADDRESS和PORT改为刚才查看的地址和端口）： git config --global http.proxy IP_ADDRESS:PORT # git config --global http.proxy 127.0.0.1:10809 ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:3:1","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"参考 Git Cheat Sheets ","date":"2021-03-10","objectID":"/posts/git-%E6%95%99%E7%A8%8B/:4:0","series":null,"tags":[],"title":"Git 教程","uri":"/posts/git-%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"饥荒 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"科普 食物可通过觅食，陷阱，种植或者猎捕动物和怪兽获得。 不同的食物可以恢复不同的饥饿和一些生命以及理智。 但是如果吃下一些像是怪物肉或是榴梿之类的食物，可能反而会对玩家的生命值造成伤害，甚至是降低玩家的理智。 不同颜色的蘑菇针对生命值和理智值也都会对玩家产生不同的效果。 另外有些比较特殊的食物，比如发光莓，在吃下去后会给予玩家特别的效果。 大部分食物都可以通过在营火上烹饪来增加恢复的饥饿与生命或是减少（抵消）生吃对玩家造成的负面影响。 有些生的食物（通常为肉类）可以挂在干肉架上晒干来取得可以长久保存并能回复玩家饥饿/生命/理智的食物。 烹饪锅可以用来取得一些特殊料理，让玩家可以从食物中得到额外的好处（大部分的料理都有回复理智的效果，但直接食用大部分的食物都无法得到）。 肉类可以作为诱饵，可以招募猪人，可以进贡给猪王换取金块。 一个可以不断取得蛋的方法就是通过将肉喂给鸟笼中的鸟，肉类还可以制作复活肖像。 当玩家在物品栏中持有肉时会被兔人视为攻击目标。 蔬菜和水果可以当作草食动物的诱饵（像是兔子）或是喂给猪人来换取粪便。种子可以当作捕鸟陷阱的诱饵。 被视为游戏中最重要的物品之一，根据地图生成的不同，食物可以从很丰富到十分短缺都有可能。 食物受到季节的影响非常大，这鼓励玩家去根据季节挑选适合的食物（译注：像是冬天农田几乎不会生长、春天兔子不会跑出洞、只有夏天才有仙人掌花…等等例子）。 大多数的食物都会慢慢的腐烂，最后变成腐烂食物。 当食物的腐坏度为50%时，食物将会变为**不新鲜（黄色）**状态。可恢复2/3的饥饿，1/3的生命，不能恢复理智。 当食物的腐坏度为20%时，食物将会变为**变质（红色）**状态。可恢复1/2的饥饿，不能恢复生命，降低10点理智。 地面上的食物腐坏率为150%，冰箱中的腐坏率为50%，冬天食物的腐坏率为75%。 不新鲜和变质的食物对**WX-78（机器人）**没有影响。 堆叠的食物具有相同的腐烂程度，将腐烂程度不同的食物堆叠起来腐烂值取平均值。在游戏中可以利用这个设定来\"拯救\"快要腐烂的食物：将快腐烂的食物与新鲜的食物堆叠起来，然后ctrl+点击分开食物。 烹饪中的食物和在烹饪锅中的食物降低一般的腐坏度。 高脚鸟蛋，曼德拉草和巨鹿眼球是不会腐坏的。 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"食谱 类别 详细 肉类 怪物肉 鱼类 蔬菜 胡萝卜、各种蘑菇、 水果 浆果、多汁浆果、香蕉、西瓜、火龙果、石榴、榴莲 烹饪 其他 桦树果、蝴蝶翅膀、黄油、牛奶、冰、蜂蜜、腐烂食物、各种种子、齿轮、树枝、噩梦燃料、骨头碎片、花瓣 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"肉丸 肉度×0.5，1肉3填充物，填充物禁树枝。 饥饿 精神 生命 烹饪时间 腐烂时间 62.5 5 3 15秒 10天 食材1 食材2 食材3 食材4 怪物肉、大肉、小肉、鸡腿 浆果、冰 浆果、冰 浆果、冰 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:1","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"炖肉 肉度×3，3肉1填充物，填充物禁树枝。 饥饿 精神 生命 烹饪时间 腐烂时间 150 5 12 15秒 10天 食材1 食材2 食材3 食材4 怪物肉 大肉 大肉 浆果、冰 怪物肉 大肉 小肉 小肉 大肉 大肉 鸡腿 蛙腿 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:2","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"火鸡大餐 鸡腿×2+肉度×0.5，2鸡腿1肉1填充物，两个鸡腿必须是生的。 饥饿 精神 生命 烹饪时间 腐烂时间 75 5 20 60秒 6天 食材1 食材2 食材3 食材4 鸡腿 鸡腿 怪物肉、大肉、小肉 浆果、蘑菇、冰 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:3","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"培根煎蛋 蛋度×2+肉度×1.5，禁蔬菜、水果。 饥饿 精神 生命 烹饪时间 腐烂时间 75 5 20 40秒 20天 食材1 食材2 食材3 食材4 鸡蛋 鸡蛋 怪物肉、大肉 大肉、小肉 高脚鸟蛋 怪物肉、大肉、小肉 怪物肉、大肉、小肉 树枝 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:4","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"蜜汁火腿 蜂蜜×1+肉度×2，禁树枝。 饥饿 精神 生命 烹饪时间 腐烂时间 75 5 30 40秒 20天 食材1 食材2 食材3 食材4 蜂蜜 怪物肉 大肉、小肉 大肉、小肉 蜂蜜 怪物肉 大肉 浆果 蜂蜜 蜂蜜 怪物肉 大肉 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:5","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"果仁杂烩 烤桦树果+水果×1.5，禁冰、蔬菜。 饥饿 精神 生命 烹饪时间 腐烂时间 12.5 5 30 40秒 15天 食材1 食材2 食材3 食材4 烤桦树果 浆果 浆果 浆果 烤桦树果 烤桦树果 浆果 浆果 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:6","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"波兰水饺 禁树枝。 饥饿 精神 生命 烹饪时间 腐烂时间 37.5 5 40 20秒 20天 食材1 食材2 食材3 食材4 鸡蛋 鸡蛋 怪物肉 蘑菇 高脚鸟蛋 浆果 怪物肉 蘑菇 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:7","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"火龙果派 饥饿 精神 生命 烹饪时间 腐烂时间 75 5 40 40秒 15天 食材1 食材2 食材3 食材4 火龙果 树枝、浆果 树枝、浆果 树枝、浆果 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:8","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"华夫饼 饥饿 精神 生命 烹饪时间 腐烂时间 37.5 5 60 10秒 6天 食材1 食材2 食材3 食材4 黄油 鸡蛋、高脚鸟蛋 浆果 树枝 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:9","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"炸鱼条 鱼+树枝 饥饿 精神 生命 烹饪时间 腐烂时间 37.5 5 40 40秒 10天 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:10","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"太妃糖 蜂蜜×3 饥饿 精神 生命 烹饪时间 腐烂时间 25 15 -3 40秒 15天 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:11","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"蝴蝶松饼 饥饿 精神 生命 烹饪时间 腐烂时间 37.5 5 20 40秒 15天 食材1 食材2 食材3 食材4 蝴蝶翅膀 蘑菇 树枝 树枝 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:12","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"粉末蛋糕 玉米+蜂蜜，腐烂时间很久。 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:2:13","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"人物 mod ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"宝石萝莉 宝石萝莉完整攻略 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:3:1","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":["饥荒"],"content":"参考资料 Don’t Starve 中文维基 ","date":"2021-03-10","objectID":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/:4:0","series":null,"tags":["饥荒"],"title":"饥荒教程","uri":"/posts/%E9%A5%A5%E8%8D%92%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"Google, Youtube, Facebook, Twitter, Instagram, Reddit, … ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"准备工作 VPS：推荐CN2 GIA线路，其次CN2 Bandwagon Vultr DigitalOcean UUUVPS 域名 免费：Freenom 购买：NameSilo, GoDaddy DNS \u0026 CDN：Cloudflare ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"Freenom 免费域名申请 ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:1:1","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"域名托管到 Cloudflare ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:1:2","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"脚本 ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"v2ray-agent Github 支持： VLESS + TCP + TLS VLESS + TCP + XTLS VLESS + gRPC + TLS VLESS + WS + TLS VMess + TCP + TLS VMess + WS + TLS Trojan Trojan-Go + WS 安装： wget -P /root -N --no-check-certificate \"https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh\" \u0026\u0026 chmod 700 /root/install.sh \u0026\u0026 /root/install.sh 查看配置：vasma ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:2:1","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"Xray_onekey Github 支持： VLESS + TCP + XTLS/TLS VLESS + TCP + XTLS/TLS 及 VLESS + WS + TLS 回落并存模式 安装： wget -N --no-check-certificate -q -O install.sh \"https://raw.githubusercontent.com/wulabing/Xray_onekey/main/install.sh\" \u0026\u0026 chmod +x install.sh \u0026\u0026 bash install.sh 查看配置：同安装 ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:2:2","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"客户端 ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"Windows v2rayN 下载 Clash for Windows 下载 Qv2ray 下载 内核： v2ray xray trojan-go 插件： Trojan Trojan-Go 支持协议： Vmess (V2ray) Vless (Xray) SS (Shadowsocks) SSR (ShadowsocksR) Trojan Trojan-Go NaiveProxy QvTrojanGoPlugin.v1.0.1.Windows-x64.dll、QvTrojanPlugin.v2.0.0.Windows-x64.dll ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:3:1","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":[],"content":"安卓 V2rayNG 下载 igniter 只支持 Trojan 下载 Clash for Android 下载 AnXray 下载 SagerNet 下载 ","date":"2021-03-03","objectID":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/:3:2","series":null,"tags":[],"title":"科学上网教程","uri":"/posts/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"},{"categories":["LaTeX","Cheatsheet"],"content":"LaTeX 常用数学符号、公式。 标量 - 斜体小写 - $a$ 向量 - 粗体小写 - $a$ 矩阵 - 粗体大写 - $A$ ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:0:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"希腊字母 大写字母 代码 小写字母 代码 变量形式 代码 $\\alpha$ \\alpha $\\beta$ \\beta $\\Gamma$ \\Gamma $\\gamma$ \\gamma $\\Delta$ \\Delta $\\delta$ \\delta $\\epsilon$ \\epsilon $\\Theta$ \\Theta $\\theta$ \\theta $\\Lambda$ \\Lambda $\\lambda$ \\lambda $\\mu$ \\mu $\\Pi$ \\Pi $\\pi$ \\pi $\\rho$ \\rho $\\Sigma$ \\Sigma $\\sigma$ \\sigma $\\Phi$ \\Phi $\\phi$ \\phi $\\varphi$ \\varphi $\\Psi$ \\Psi $\\psi$ \\psi $\\Omega$ \\Omega $\\omega$ \\omega ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:1:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"特殊符号 符号 代码 解释 $\\partial$ \\partial 偏导数 $\\nabla$ \\nabla 梯度 $\\ell$ \\ell $\\Complex$ \\Complex \\cnums 复数集 $\\R$ \\Reals \\reals \\R 实数集 $\\Z$ \\Z 整数集 $\\natnums$ \\natnums \\N 自然数集 ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:2:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"垂直布局 符号 代码 解释 $x_n$ x_n 下标 $e^x$ e^x 上标 $_u^o$ _u^o 上下标 $\\overset{N}{\\sum}$ \\overset{N}{\\sum} 正上标 $\\underset{i=1}{\\sum}$ \\underset{i=1}{\\sum} 正下标 $$ `` ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:3:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"字体 符号 代码 解释 $\\sqrt{x}$ \\sqrt{x} 平方根 $\\sqrt[3]{x}$ \\sqrt[3]{x} 三次方根 $$ `` ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:4:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"逻辑符与集合论 符号 代码 解释 $\\forall$ \\forall 所有 $\\exist$ \\exists \\exist 存在 $\\in$ \\in \\isin 属于 $\\notin$ \\notin 不属于 $\\subset$ \\subset 包含于 $\\supset$ \\supset 包含 $\\emptyset$ \\emptyset \\empty 空集 $\\varnothing$ \\varnothing 空集 $\\implies$ \\implies 充分 $\\impliedby$ \\impliedby 必要 $\\iff$ \\iff 充分必要 $\\neg$ \\neg \\lnot 非 $\\lor$ \\lor 或 $\\land$ \\land 与 $\\because$ \\because 因为 $\\therefore$ \\therefore 所以 $\\ne$ \\ne \\neq 不等于 $\\approx$ \\approx 约等于 $\\coloneqq$ \\coloneqq 赋值 $\\gt$ \\gt 大于 $\\ge$ \\ge \\geq 大于等于 $\\lt$ \\lt 小于 $\\le$ \\le \\leq 小于等于 $$ `` ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:5:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"多元运算符 符号 代码 解释 $\\sum$ \\sum 累加 $\\prod$ \\prod 累乘 $\\bigcap$ \\bigcap 累交 $\\bigcup$ \\bigcup 类并 $\\int$ \\int 一重积分 $\\iint$ \\iint 二重积分 $\\iiint$ \\iiint 三重积分 $\\oint$ \\oint 一重环路积分 $\\oiint$ \\oiint 二重环路积分 $\\oiiint$ \\oiiint 三重环路积分 ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:6:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"二元运算符 符号 代码 解释 $\\bmod$ \\bmod $x \\pmod a$ x \\pmod a $\\div$ \\div $\\pm$ \\pm \\plusmn $\\oplus$ \\oplus $\\otimes$ \\otimes $$ `` ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:7:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"常用数学符号 符号 代码 解释 $\\lim$ \\lim $\\ln$ \\ln $\\log$ \\log $\\exp$ \\exp $\\max$ \\max $\\min$ \\min $\\argmax$ \\argmax $\\argmin$ \\argmin $\\sin$ \\sin $\\cos$ \\cos $\\tan$ \\tan $$ `` ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:8:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"矩阵 ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:9:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"一行多个公式 $$ \\begin{align} x\u0026=t \u0026 x\u0026=\\cos t \u0026 x\u0026=t \\notag y\u0026=2t \u0026 y\u0026=\\sin(t+1) \u0026 y\u0026=\\sin t \\end{align} $$ ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:10:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"大括号多行公式 $$ f(x)=\\begin{cases} 2x+1, \u0026 \\text{if} \u0026 x \\lt 0; \\ 0, \u0026 \\text{if} \u0026 x = 0; \\ x^2-1, \u0026 \\text{if} \u0026 x \\gt 0. \\end{cases} $$ ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:11:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["LaTeX","Cheatsheet"],"content":"参考 Supported Functions - KaTeX ","date":"2021-02-11","objectID":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/:12:0","series":null,"tags":["LaTeX","Cheatsheet"],"title":"LaTeX 常用数学符号","uri":"/posts/latex-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"categories":["数据结构","算法"],"content":"数据结构，是抽象的表示数据的方式；算法，则是计算的一系列有效、通用的步骤。算法与数据结构是程序设计中相辅相成的两个方面，是计算机学科的重要基石。 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:0:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"1.基础 存储结构： 数组：由于是紧凑连续存储，可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。 链表：因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:1:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"2.排序 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:2:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"1.选择排序 void selectionSort(vector\u003cint\u003e\u0026 arr) { for (int i = 0; i \u003c arr.size(); i++) { int minIdx = i; for (int j = i + 1; j \u003c arr.size(); j++) { minIdx = (arr[j] \u003c arr[minIdx]) ? j : minIdx; } int temp = arr[i]; arr[i] = arr[minIdx]; arr[minIdx] = temp; } } 时间复杂度：$ O(n^2) $ 空间复杂度：$ O(1) $ 特点： 不稳定 每一轮有一个元素（当前最小元素）归位 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:2:1","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"2.冒泡排序 void bubbleSort(vector\u003cint\u003e\u0026 arr) { for (int step = 1; step \u003c arr.size(); step++) { for (int i = 0; i \u003c arr.size() - step; i++) { if (arr[i] \u003e arr[i + 1]) { int temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; } } } } 时间复杂度：$ O(n^2) $ 空间复杂度：$ O(1) $ 特点： 稳定 每一轮有一个元素（当前最大元素）归位 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:2:2","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"3.插入排序 void insertionSort(vector\u003cint\u003e\u0026 arr) { for (int i = 1; i \u003c arr.size(); i++) { int temp = arr[i], j; for (j = i - 1; j \u003e= 0 \u0026\u0026 arr[j] \u003e arr[i]; j--) { arr[j + 1] = arr[j]; } arr[j + 1] = temp; } } 时间复杂度：$ O(n^2) $ 空间复杂度：$ O(1) $ 特点： 稳定 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:2:3","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"归并排序 void mergeSort() { } void merge() { } ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:2:4","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"快速排序 基本思想： 从数组中取出一个数，称之为基数（pivot）。 遍历数组，将比基数大的数字放到它的右边，比基数小的数字放到它的左边。遍历完成后，数组被分成了左右两个区域。 将左右两个区域视为两个数组，重复前两个步骤，直到排序完成。 // 把数组分为两半，返回分割中点 int partition(vector\u003cint\u003e arr, int low, int high) { int pivot = arr[low]; while (low \u003c right) { while (low \u003c high \u0026\u0026 arr[high] \u003e pivot) high--; arr[low] = arr[high]; while (low \u003c high \u0026\u0026 arr[low] \u003c= pivot) low++; arr[high] = arr[low]; } arr[low] = pivot; return low; } void quickSort(vector\u003cint\u003e arr, int low, int high) { if (low \u003e= high) return; int mid = partition(arr, low, high); quickSort(arr, low, mid - 1); quickSort(arr, mid + 1, high); } ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:2:5","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"总结 排序算法 时间复杂度 稳定性 冒泡排序 $O(n^2)$ 稳定 选择排序 $O(n^2)$ 不稳定 插入排序 $O(n^2)$ 稳定 快速排序 $O(n \\log n)$ 不稳定 归并排序 $O(n \\log n)$ 稳定 堆排序 $O(n \\log n)$ 不稳定 计数排序 $O(n)$ 稳定 基数排序 $O(n)$ 稳定 名称 数据对象 稳定性 时间复杂度 额外空间复杂度 描述 平均 最坏 冒泡排序 数组 是 $ O(n^2) $ $ O(1) $ (无序区，有序区)从无序区通过交换找出最大元素放到有序区前端。 选择排序 数组 否 $ O(n^2) $ $ O(1) $ (有序区，无序区)在无序区里找一个最小的元素放到有序区后端。对数组：比较多，交换少 链表 是 插入排序 数组、链表 是 $ O(n^2) $ $ O(1) $ (有序区，无序区)把无序区的第一个元素插入到有序区的合适位置。对数组：比较少，交换多 堆排序 数组 否 $ O(n \\log{n}) $ $ O(1) $ (最大堆，有序区)从堆顶把最大值弹出到有序区前端，然后调整堆。 归并排序 数组 是 $ O(n \\log{\\log{n}}) $ $ O(1) $ 将数据分为两段，再从两段中逐个选最小的元素移入新数据段的末尾。可自上而下，也可自下而上 $ O(n \\log{n}) $ 自上而下：$ O(n)+O(\\log{n}) $ 链表 自下而上：$ O(1) $ 快速排序 数组 否 $ O(n \\log{n}) $ $ O(n^2) $ $ O(\\log{n}) $ (小数区，基准元素，大数区)在区间中随机挑选一个元素作为基准元素，将小于该基准的元素放到基准之前，大于的放到基准之后，然后递归地对小数区和大数区进行快速排序。 希尔排序 数组 否 $ O(n \\log{\\log{n}}) $ $ O(n^2) $ $ O(1) $ 按从大到小的间距进行多次插入排序，最后一次的间距为1。 计数排序 数组、链表 是 $ O(n+m) $ $ O(n+m) $ 统计小于等于该元素值的元素的个数i，然后将该元素放在目标数组的第i个位置。 桶排序 数组、链表 是 $ O(n) $ $ O(m) $ 将值为i的元素放入第i号桶，然后依次把桶里的元素倒出来。 基数排序 数组、链表 是 $ O(k \\times n) $ $ O(n^2) $ 一种多关键字的排序算法，可用桶排序实现。 参考文章 当我谈排序时，我在谈些什么🤔 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:2:6","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"树 一棵 n 个节点的树，有 n-1 条边。 一棵 n 个节点的树，有 n 棵子树。 根节点：唯一，无入度的节点 节点的深度：节点距离根节点的距离。 typedef struct treeNode { treeNode(int x): value(x) {} int value; vector\u003ctreeNode*\u003e child; } TreeNode; ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:3:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"二叉树 满二叉树：一个高度为 d 的二叉树，有 $2^d-1$ 个节点。即除叶节点外，每个节点都有两个孩子，即节点的出度只为 0 或 2。 完全二叉树：只有最后一层可能未满，且节点严格从左往右排列。即出度为 1 的节点一定只有左孩子；若某节点出度小于 2，则其右边的节点出度为 0。 二叉树第 $i$ 层最多有 $2^{i-1}$ 个节点。 高度为 $d$ 的二叉树最多有 $2^d-1$ 个节点。 class TreeNode(object): def __init__(self, value): self.lchild = None self.rchild = None self.value = 0 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:4:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"遍历 前序遍历 递归法： void preorder(TreeNode* root) { if (!root) return; // 处理节点值 root-\u003eval preorder(root-\u003eleft); preorder(root-\u003eright); } 非递归法： 压栈先右后左 void preorder(TreeNode* root) { if (!root) return; stack\u003cTreeNode*\u003e st; st.push(root); while (!st.empty()) { root = st.top(); st.pop(); // 处理节点值 root-\u003eval if (root-\u003eright) st.push(root-\u003eright); if (root-\u003eleft) st.push(root-\u003eleft); } } void preorder(TreeNode* root) { stack\u003cTreeNode*\u003e st; whilt (root || !st.empty()) { if (root) { // 处理节点值 root-\u003eval st.push(root); root = root-\u003eleft; } else { root = st.top()-\u003eright; st.pop(); } } } 中序遍历 对于二叉搜索树，中序遍历可以得到一个递增的有序序列 递归法： void inorder(TreeNode* root) { if (!root) return; inorder(root-\u003eleft); // 处理节点值 root-\u003eval inorder(root-\u003eright); } 非递归法： void inorder(TreeNode* root) { stack\u003cTreeNode*\u003e st; while (root || !st.empty()) { if (root) { st.push(root); root = root-\u003eleft; } else { // 处理节点值 st.top()-\u003eval root = st.top()-\u003eright; st.pop(); } } } 后序遍历 后序遍历是删除节点时的顺序 可以配合栈来计算表达式树 递归法： void postorder(TreeNode* root) { if (!root) return; postorder(root-\u003eleft); postorder(root-\u003eright); // 处理节点值 root-\u003eval } 非递归法： 前序遍历的非递归方法先左后右，最后逆序即可 void postorder(TreeNode* root) { if (!root) return; vector\u003cint\u003e res; // 保存遍历结果 stack\u003cTreeNode*\u003e st; st.push(root); while (!st.empty()) { root = st.top(); st.pop(); res.push_back(root-\u003eval); // 保存节点值 if (root-\u003eleft) st.push(st-\u003eleft); if (root-\u003eright) st.push(st-\u003eright); } reverse(res.begin(), res.end()); // 逆序 } 层序遍历 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:4:1","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"常见问题 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:4:2","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"回溯算法 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:5:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"N 皇后问题 题目描述：将 N 个皇后放在 N×N 的棋盘上，需保证任意两个皇后不能处于同行、同列或同斜线上。 vector\u003cvector\u003cchar\u003e\u003e solve(int n) { } void dfs(vector\u003cvector\u003cchar\u003e\u003e\u0026 chessboard, int rowNo, int n) { } ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:5:1","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"贪心与分治理论 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:6:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"贪心算法 贪心算法理论 严格来说，贪心算法并不是某些有明确指向的算法，而是代指一类算法思想。在有多种决策可选时，我们会选择一个最优的策略，即所谓的贪心算法。 举一个最简单的例子，田忌赛马。在对方出上等马的时候，我方没有任何一匹马能赢这一局，既然注定是输，那么我们希望尽量减少我们的损失。何谓损失？我们每一局都会用掉一匹马，那么对于必输的局，显然用掉最弱的马是最好的。这里就可以归类出两个名词： 局部目标：在贪心问题中，总归有一个局部的目标。例如在上述场景里，我们希望减少这一轮的损失。这就是一个局部目标。和局部目标对应的是全局目标，全局上来说我们当然希望最终能赢得比赛。 策略：在这个局部情景里，我们有多种可用的决策，例如我们可以挑选任意一匹马应战。 实际上，很多问题都可以拆解为若干个局部问题和局部策略。如果这一类问题满足： 局部问题存在最优解。 局部问题最优可以保证全局问题最优。 那么这个问题就可以通过贪心算法解决。 小技巧：局部问题又称为子问题，很多复杂的原始问题都可以拆解成若干个子问题构成，例如一盘围棋就可以拆解为每次双方执子的小问题。在不同的情景下，子问题的性质是不一样的，对应的解决办法也不一样。 例如： 子问题最优则原始问题最优——贪心算法或者动态规划算法。 子问题最优则原始问题最优，且子问题互相独立——分治算法。 子问题最优不能推导出原始问题最优——暴力搜索等。 算法中的贪心思想 例一：二叉搜索树找最小值 子问题：最小值一定在根节点，左子树（如果存在），右子树（如果存在）三者之一上，因此原问题可以划分为三个子问题。 我们本来可以在左右子树上均查找一次最小值，但是根据二叉查找树的性质，如果左子树存在，那么最小值只可能存在于左子树上。这就是一个贪心的思想，通过只找一边的子树，我们可以将复杂度从O(n)降低至O(log(h))，其中h为树的高度。 例二：二分查找问题 同样，二分查找也存在贪心的思想。在确定left, mid, right后，根据target和mid的大小关系，我们同样只会继续查找左半边或者右半边，这也是因为另一边不可能有目标值了。 贪心问题解决思路 那么对于原始的复杂问题，如何能够知道他是否能被贪心解决呢？ 首先，我们需要将原始问题拆解成子问题，明确子问题的局面以及局面中可进行的操作。实际上不止贪心问题，很多问题都需要这样的拆解过程。 然后我们需要考虑子问题的最优，是否能保证全局最优。如果能的话，我们就可以只考虑如何解子问题，否则就可能需要动态规划或者搜索解了。 最后，我们需要考虑如何使子问题最优，可能有些问题存在乍一看可行的策略，但是我们仍然需要仔细思考甚至证明。以保证没有漏掉什么细节情况。 小技巧：对于第三点，很多同学这里会经常犯错。比如以为贪心做法是对的，但是实际上有问题。例如错误地用贪心解决 01 背包问题（子问题最优，原问题不一定最优）等。所以如果我们觉得某道题目存在贪心策略，最好自己证明一下正确性再实现。 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:6:1","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"分治算法 复杂的原始问题可能可以拆分成若干个子问题，如果子问题之间互相独立（一个子问题的计算结果不依赖于其他子问题），那么原始问题可以被分治法解决。 分治法究竟有什么作用呢？ 简化思维逻辑：在很多情况下，原始问题是非常复杂的，例如排序问题。假设原始我们需要考虑对 1000 个数进行排序，那么利用分治思想我们可以分别对左右的 500 个数进行排序，然后考虑合并两个有序数组。当然，排序 500 个数看起来仍然不容易，但是我们可以继续分治下去，最终我们只需要考虑 1~2 个数的排序策略，这就是经典的归并排序的思想。 分布式算法：虽然在算法学习的过程中少有接触多进程和分布式等思想。但是随着 CPU core 越来越多，能够被分治法拆解的问题显然更方便进行并行计算，从而节省总体时间。因此分治思想在工程实现上具有重要的意义。 效率优化：虽然我们不常用并行解决算法问题，但是在某些情况下仍然能够帮助我们节省计算代价，代表就是快速幂算法。课程在这里不作展开，我们会在例题部分进一步详细讨论。 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:6:2","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"总结 对于复杂的原问题： 如果子问题最优则原问题最优，贪心算法。 如果子问题需要全部求解才能求解原问题，子问题互相独立，分治算法。 如果子问题最优不能保证原问题最优，但是子问题之间不会循环（所谓循环，是指从问题 A 拆解出子问题 B，然后子问题 B 又能拆解出子问题 A），考虑动态规划算法。 更加复杂的情况，我们总是可以考虑暴力搜索解决。 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:6:3","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":["数据结构","算法"],"content":"动态规划 考虑能否将问题规模减小 将问题规模减小的方式有很多种，一些典型的减小方式是动态规划分类的依据，例如线性，区间，树形等。这里考虑数组上常用的两种思路： 每次减少一半：如果每次将问题规模减少一半，原问题有[10,9,2,5]，和[3,7,101,18]，两个子问题的最优解分别为 [2,5] 和 [3,7,101]，但是找不到好的组合方式将两个子问题最优解组合为原问题最优解 [2,5,7,101]。 每次减少一个：记 f(n)f(n) 为以第 nn 个数结尾的最长子序列，每次减少一个，将原问题分为 f(n-1)f(n−1), f(n-2)f(n−2), …, f(1)f(1)，共 n - 1n−1 个子问题。n - 1 = 7n−1=7 个子问题以及答案如下： 以上组合方式可以写成一个式子，即状态转移方程 总结： 解决动态规划问题最难的地方有两点： 如何定义 f(n)f(n) 如何通过 f(1)f(1), f(2)f(2), … f(n - 1)f(n−1) 推导出 f(n)f(n)，即状态转移方程 递归 有了状态转移方程，实际上已经可以直接用递归进行实现了。 自顶向下（记忆化） 递归的解法需要非常多的重复计算，如果有一种办法能避免这些重复计算，可以节省大量计算时间。记忆化就是基于这个思路的算法。在递归地求解子问题 f(1)f(1), f(2)f(2)… 过程中，将结果保存到一个表里，在后续求解子问题中如果遇到求过结果的子问题，直接查表去得到答案而不计算。 对于这种将问题规模不断减少的做法，我们把它称为自顶向下的方法。 自底向上（迭代） 在自顶向下的算法中，由于递归的存在，程序运行时有额外的栈的消耗。 有了状态转移方程，我们就知道如何从最小的问题规模入手，然后不断地增加问题规模，直到所要求的问题规模为止。在这个过程中，我们同样地可以记忆每个问题规模的解来避免重复的计算。这种方法就是自底向上的方法，由于避免了递归，这是一种更好的办法。 但是迭代法需要有一个明确的迭代方向，例如线性，区间，树形，状态压缩等比较主流的动态规划问题中，迭代方向都有相应的模式。参考后面的例题。但是有一些问题迭代法方向是不确定的，这时可以退而求其次用记忆化来做，参考后面的例题。 ","date":"2021-02-09","objectID":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/:7:0","series":null,"tags":["数据结构","算法"],"title":"数据结构与算法","uri":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"categories":null,"content":"谷歌三件套包括 Google Play 商店（Google Play Store）、Google Play 服务（Google Play Services）和Google 服务框架（Google Services Framework），只有正确安装了这三件套才能访问 Google Play 商店和使用需要 Google Play 服务的 APP。 ","date":"2021-02-08","objectID":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":null,"title":"谷歌三件套安装教程","uri":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"安装 ","date":"2021-02-08","objectID":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":null,"title":"谷歌三件套安装教程","uri":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"一键安装 ","date":"2021-02-08","objectID":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:1:1","series":null,"tags":null,"title":"谷歌三件套安装教程","uri":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"手动安装 访问 APKMirror。 搜索Google Services Framework，根据安卓版本选择对应的版本下载并安装。（示例：Google Services Framework 10） 搜索Google Play Services，选择最新版并进入，选择arm64-v8a + armeabi-v7a、对应的安卓版本、nodpi，下载并安装。 搜索Google Play Store，选择最新版下载并安装。 若三件套都安装完，并且正确科学上网后还是打不开Google Play 商店，尝试下载旧版本Google Play Services安装。 不推荐使用beta版本。 ","date":"2021-02-08","objectID":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:1:2","series":null,"tags":null,"title":"谷歌三件套安装教程","uri":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"Google Play Services 版本号 版本号示例：20.50.66 (100400-351698872)，其中100400说明： 第 1、2 位表示安卓版本 00 - Android 4.1 02 - Android 5.0 04 - Android 6.0 05 - Wear OS 08 - Android TV 10 - Android 9.0 12 - Android 10 15 - Android 11 第 3、4 位表示CPU架构 03 - armeabi-v7a 04 - armeabi-v7a + arm64-v8a 07 - x86 08 - x86 + x86_64 第 5、6 位表示屏幕 DPI 00 - nodpi 02 - 160dpi 04 - 240dpi 06 - 320dpi 08 - 480dpi 则100400指Android 9.0、arm64-v8a和nodpi。 ","date":"2021-02-08","objectID":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/:1:3","series":null,"tags":null,"title":"谷歌三件套安装教程","uri":"/posts/%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"标准模板库（Standard Template Library，STL）是一组 C++ 模板类，提供常见的数据结构和函数，如列表、堆栈、数组等。它是由容器类、算法和迭代器构成的一个通用库，它的组件是参数化的。 STL 包含以下四个组件： 算法（Algorithms）：头文件\u003calgorithm\u003e定义了一组函数，作用于容器，并为容器中的内容提供各种操作方法。 容器（Containers）：用来管理某一类对象的集合。C++ 提供了各种不同类型的容器，如 deque、list、vector、map、set、bitset 等。 函数（Functions）： 迭代器（Iterators）：遍历容器。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cvector\u003e vector是一个动态数组，需要#include \u003cvector\u003e。 数组大小动态改变 可以进行逻辑操作（是否相等、比较大小） ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"vector 1.1 初始化 vector() 初始化为空 explicit vector(size_type n) 初始化为 n 个 0 vector(size_type n, const value_type\u0026 val) 初始化为 n 个 val vector(InputIterator first, InputIterator last) 初始化为数组或迭代器 [first, last) 区间内的元素 vector(const vector\u0026 x) 复制 vector 中的元素 vector(initializer_list\u003cvalue_type\u003e il) 复制指定列表中的元素 vector\u0026 operator=(const vector\u0026 x) 复制 vector 中的元素 vector\u0026 operator=(initializer_list\u003cvalue_type\u003e il) 复制指定列表中的元素 vector\u003cint\u003e v1; // {} vector\u003cint\u003e v2 = {1, 2, 3}; // {1, 2, 3} vector\u003cint\u003e v3({1, 2, 3}); // {1, 2, 3} vector\u003cint\u003e v4 = v3; // {1, 2, 3} vector\u003cint\u003e v5(v3); // {1, 2, 3} vector\u003cint\u003e v6(3); // {0, 0, 0} vector\u003cint\u003e v7(3, 2); // {2, 2, 2} int arr[] = {1, 2, 3}; vector\u003cint\u003e v8(arr, arr + 1); // {1} vector\u003cint\u003e v9(v4.begin(), v4.begin() + 2); // {1, 2} vector\u003cvector\u003cint\u003e\u003e v10(2, vector\u003cint\u003e(3)); // {{0, 0, 0}, {0, 0, 0}} 类型任意，长度可以是变量 1.2 添加 void push_back(const value_type\u0026 val) 在末尾添加元素 void emplace_back(Args\u0026\u0026... args) 在末尾构造并插入元素 iterator emplace(const_iterator position, Args\u0026\u0026... args) 在指定位置构造并插入元素 iterator insert(const_iterator position, const value_type\u0026 val) 在指定位置插入元素 iterator insert(const_iterator position, size_type n, const value_type\u0026 val) 在指定位置插入 n 个 val iterator insert(const_iterator position, InputIterator first, InputIterator last) 在指定位置插入数组或迭代器 [first, last) 区间内的元素 iterator insert(const_iterator position, initializer_list\u003cvalue_type\u003e il) 在指定位置插入指定列表中的元素 vector\u003cpair\u003cstring, int\u003e\u003e v; v.push_back(make_pair(\"Mike\", 1)); v.emplace_back(\"John\", 2); // 隐式地构造了 pair 并插入末尾 1.3 删除 void pop_back() 删除最后一个元素 iterator erase(const_iterator position) 删除指定位置的元素 iterator erase(const_iterator first, const_iterator last) 删除迭代器 [first, last) 区间内的元素 void clear() noexcept 清空 1.4 容量 bool empty() const 判断容器是否为空 size_type size() const 返回元素个数 size_type capacity() const noexcept 返回已分配存储容量的大小 void resize(size_type n) 改变大小，变小截断，变大补 0 void resize(size_type n, const value_type\u0026 val) 改变大小，变小截断，变大补 val 1.5 其他操作 void assign(size_type n, const value_type\u0026 val) 赋值为 n 个 val void assign(InputIterator first, InputIterator last) 赋值为数组或迭代器 [first, last) 区间内的元素 void assign(initializer_list\u003cvalue_type\u003e il) 赋值为指定列表中的元素 void swap(vector\u0026 x) 交换两个 vector 1.6 遍历 reference operator[](size_type n) 返回位置为 n 的元素的引用，越界发生未知错误（不推荐） reference at(size_type n) 返回位置为 n 的元素的引用，越界抛出 out_of_range 异常（推荐） reference front() 返回第一个元素的引用 reference back() 返回最后一个元素的引用 for (auto it = v.begin(); it != v.end(); it++) {*it;} // 正向遍历，有迭代器 for (auto it = v.rbegin(); it != v.rend(); it++) {*it;} // 反向遍历，有迭代器 for (int\u0026 e : v) {e;} // 正向遍历，无索引 for (int e : v) {e;} // 正向遍历，无索引，不改变原数据 for (int i = 0; i \u003c v.size(); i++) {v.at(i);} // 正向遍历，有索引 for (int i = v.size() - 1; i \u003e= 0; i--) {v.at(i);} // 反向遍历，有索引 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:1:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"vector\u003cbool\u003e 基本操作同 vector。 特殊操作： void flip() noexcept 所有位都翻转 static void swap(reference ref1, reference ref2) noexcept 交换两个位置的值 vector\u003cbool\u003e mask; mask.push_back(true); mask.push_back(false); // {1 0} mask.flip(); // {0 1} mask.swap(mask[0], mask[1]); // {1 0} ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:1:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cstack\u003e stack是一个栈，需要#include \u003cstack\u003e。 后进先出（LIFO） ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"2.1 初始化 默认底层容器是 deque 可以显式设置底层容器为 vector stack\u003cint\u003e st1; stack\u003cint\u003e st2(st1); stack\u003cint\u003e st3({1, 2, 3}); // st3.top() == 3 deque\u003cint\u003e dq(2, 3); stack\u003cint\u003e st4(dq); // 默认底层容器是 deque vector\u003cint\u003e v({1, 2, 3}); stack\u003cint, vector\u003cint\u003e\u003e st5(v); // 设置底层容器为 vector ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:2:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"2.2 操作 void push(const value_type\u0026 val) 栈顶添加元素 void emplace(Args\u0026\u0026... args) 栈顶添加元素 void pop() 栈顶弹出元素 reference\u0026 top() 返回栈顶元素 bool empty() const 判断栈是否为空 size_type size() const 返回元素个数 void swap(stack\u0026 x) noexcept 交换两个栈 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:2:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003clist\u003e list是一个双向链表，需要#include \u003clist\u003e。 无法按索引访问元素 插入删除元素效率高 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"3.1 基本操作 基本操作同 vector。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:3:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"3.2 特殊操作 添加： void push_front(const value_type\u0026 val) 在开头插入元素 void emplace_front(Args\u0026\u0026... args) 在开头构造并插入元素 void splice(const_iterator position, list\u0026 x) 将 x 中的元素转移到指定位置 void splice(const_iterator position, list\u0026 x, const_iterator i) 将 x 中的位置为 i 元素转移到指定位置 void splice(const_iterator position, list\u0026 x, const_iterator first, const_iterator last) 将 x 中的 [first, last) 区间内的元素转移到指定位置 void merge(list\u0026 x) void merge(list\u0026 x, Compare comp) 删除： void pop_front() 删除第一个元素 void remove(const value_type\u0026 val) 删除值为 val 的所有元素 void remove_if(Predicate pred) 删除满足自定义一元函数的元素 void unique() 删除连续重复元素，只保留一个 void unique(BinaryPredicate binary_pred) 删除满足自定义二元函数的元素 其他： void sort() 按升序排序 void sort(Compare comp) 按自定义二元函数排序 void reverse() noexcept 逆序 list\u003cint\u003e l = {1, 1, 1, 2, 1, 2}; l.unique(); // {1, 2, 1, 2} ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:3:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cqueue\u003e queue是一个单向队列容器，需要#include \u003clist\u003e。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:4:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"queue 先进先出（FIFO） 队尾添加，队首删除 4.1.1 初始化 queue\u003cint\u003e q1; // 空 queue queue\u003cint\u003e q2(5, 2); // 大小为 5 的 queue，值均为 2 queue\u003cint\u003e q3(q2); // 复制 queue int arr[] = {1, 2, 3}; queue\u003cint\u003e q4(arr, arr + 1); // 复制数组 [first, last) 区间内的元素 vector\u003cint\u003e v = {1, 2, 3}; queue\u003cint\u003e q5(v.begin(), v.begin() + 1); // 复制迭代器 [first, last) 区间内的元素 queue\u003cint\u003e q6(v); // 复制 vector 4.1.2 操作 void push(const value_type\u0026 val) 队尾添加元素 void emplace(Args\u0026\u0026... args) 队尾添加元素 void pop() 删除队首元素 const_reference\u0026 front() const 返回队首元素 const_reference\u0026 back() const 返回队尾元素 size_type size() const 返回大小 bool empty() const 是否为空 void swap(queue\u0026 x) noexcept 交换 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:4:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"priority_queue 优先队列（堆） 默认最大优先队列（最大堆） 自动调整顺序使队首（堆顶）元素最大 4.2.1 初始化 priority_queue\u003cint\u003e pq1; // 空 priority_queue priority_queue\u003cint\u003e pq2(5, 2); // 大小为 5 的 priority_queue，值均为 2 priority_queue\u003cint\u003e pq3(pq2); // 复制 priority_queue int arr[] = {1, 2, 3}; priority_queue\u003cint\u003e pq4(arr, arr + 1); // 复制数组 [first, last) 区间内的元素 vector\u003cint\u003e v = {1, 2, 3}; priority_queue\u003cint\u003e pq5(v.begin(), v.begin() + 1); // 复制迭代器 [first, last) 区间内的元素 priority_queue\u003cint\u003e pq6(v); // 复制 vector priority_queue\u003cint, vector\u003cint\u003e, less\u003cint\u003e\u003e pq7; // 最大优先队列（最大堆） priority_queue\u003cint, vector\u003cint\u003e, greater\u003cint\u003e\u003e pq8; // 最小优先队列（最小堆） 4.2.2 操作 void push(const value_type\u0026 val) 添加元素 void emplace(Args\u0026\u0026... args) 添加元素 void pop() 删除队首（堆顶）元素 const_reference top() const 返回队首（堆顶）元素 size_type size() const 返回大小 bool empty() const 是否为空 void swap(priority_queue\u0026 x) noexcept 交换 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:4:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cdeque\u003e deque是一个双端队列容器，需要#include \u003cdeque\u003e。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:5:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"5.1 初始化 deque\u003cint\u003e dq1; // 空 deque deque\u003cint\u003e dq2(5, 2); // 大小为 5 的 deque，值均为 2 deque\u003cint\u003e dq3(dq2); // 复制 deque deque\u003cint\u003e dq4(dq2.begin(), dq2.begin() + 1); // 复制迭代器 [first, last) 区间内的元素 int arr[] = {1, 2, 3}; deque\u003cint\u003e dq5(arr, arr + 1); // 复制数组 [first, last) 区间内的元素 vector\u003cint\u003e v = {1, 2, 3}; deque\u003cint\u003e dq6(v.begin(), v.begin() + 1); // 复制迭代器 [first, last) 区间内的元素 deque\u003cint\u003e dq7 = dq6; deque\u003cint\u003e dq8 = {1, 2, 3}; ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:5:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"5.2 修改 void push_back(const value_type\u0026 val) 队尾添加元素 void push_front(const value_type\u0026 val) 队首添加元素 void emplace_back(Args\u0026\u0026... args) 队尾添加元素 void emplace_front(Args\u0026\u0026... args) 队首添加元素 iterator emplace(const_iterator position, Args\u0026\u0026... args) 迭代器指定位置前面添加元素 iterator insert(const_iterator position, const value_type\u0026 val) 迭代器指定位置前面添加元素 iterator insert(const_iterator position, size_type n, const value_type\u0026 val) 迭代器指定位置前面添加 n 个相同元素 iterator insert(const_iterator position, InputIterator first, InputIterator last) 迭代器指定位置前面添加 [first, last) 区间内元素 iterator insert(const_iterator position, initializer_list\u003cvalue_type\u003e il) void pop_back() 删除队尾 void pop_front() 删除队首 iterator erase(iterator position) 删除迭代器指向元素 iterator erase(const_iterator first, const_iterator last) 删除 [first, last) 区间内元素 void clear() noexcept 清空 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:5:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"5.3 遍历 deque\u003cint\u003e dq; for (auto it = dq.begin(); it != dq.end(); it++) {*it;} for (auto it = dq.rbegin(); it != dq.rend(); it++) {*it;} for (int e : dq) {e;} for (int\u0026 e : dq) {e;} ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:5:3","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"5.4 操作 size_type size() const noexcept 返回大小 void resize(size_type n) 调整大小为 n，调大补 0，调小末尾截断 void resize(size_type n, const value_type\u0026 val) 调整大小为 n，调大补 val，调小末尾截断 bool empty() const noexcept 判断是否为空 reference operator[](size_type n) 访问指定位置元素，越界报错 reference at(size_type n) 访问指定位置元素，越界抛出 out_of_range 异常 const_reference back() const 返回队尾元素 const_reference front() const 返回队首元素 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:5:4","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cmap\u003e map是一个有序键值对容器，每个元素由关键字（key）和该关键字对应的值（value）组合而成。需要#include \u003cmap\u003e。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:6:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"map key唯一且无法修改 默认按key升序排列 底层二叉搜索树实现，速度比unordered_map慢 6.1 初始化 map\u003cchar, int\u003e m1; map\u003cchar, int\u003e m2(m1); map\u003cchar, int\u003e m3(m1.begin(), m1.end()); map\u003cchar, int, less\u003cchar\u003e\u003e m4; // 按 key 升序排列，相当于 map\u003cchar, int\u003e map\u003cchar, int, greater\u003cchar\u003e\u003e m5; // 按 key 降序排列 6.2 添加 map\u003cchar, int\u003e m1, m2; m1['a'] = 1; m1.insert(make_pair('b', 2)); m1.insert(pair\u003cchar, int\u003e('c', 3)); m1.emplace('d', 4); m2.insert(m1.begin(), m1.find('c')); 6.3 删除 map\u003cchar, int\u003e m; m['a'] = 1; m['b'] = 2; m['c'] = 3; m.erase(m.find('c')); m.erase('a'); m.erase(m.begin(), m.end()); m.clear(); 6.4 遍历 mapped_type\u0026 operator[](const key_type\u0026 k) mapped_type\u0026 at(const key_type\u0026 k) for (auto it = m.begin(); it != m.end(); it++) { it-\u003efirst; it-\u003esecond; } for (auto it = m.rbegin(); it != m.rend(); it++) { it-\u003efirst; it-\u003esecond; } for (auto \u0026p : m) { p.first; p.second; } for (auto \u0026[k, v] : m) { k; v; } for (auto \u0026[_, v] : m) { k; v; } for (auto \u0026[k, _] : m) { k; v; } 6.5 其他操作 size_type size() const noexcept 返回元素个数 bool empty() const noexcept 判断是否为空 void swap(map\u0026 x) 交换两个 map iterator find(const key_type\u0026 k) 查找 key 值为 k 的元素，未找到返回 map::end() size_type count(const key_type\u0026 k) const 返回 key 值为 k 的元素的数量，由于 key 唯一，则存在返回 1，不存在返回 0 iterator lower_bound(const key_type\u0026 k) 返回指向第一个 key 大于等于 k 的元素的迭代器 iterator upper_bound(const key_type\u0026 k) 返回指向第一个 key 大于 k 的元素的迭代器 pair\u003citerator, iterator\u003e equal_range(const key_type\u0026 k) 返回指向 key 等于 k 的所有元素的范围的边界元素的迭代器 [first, second) map\u003cchar, int\u003e m; m['a'] = 0; m.find('b'); // m.end() m.count('a'); // 1 m.count('b'); // 0 6.6 排序 map没有随机迭代器，只有顺序迭代器，所以不能用sort 6.6.1 按 key 排序 key 升序，value 随机 默认情况，map\u003cint, char\u003e，相当于map\u003cint, char, less\u003cint\u003e\u003e。 当 key 为自定义类时： typedef struct { // 自定义类 int one, two; } Grade; struct Cmp { // 自定义比较类 bool operator()(const Grade\u0026 a, const Grade\u0026 b) const { if (a.one != b.one) return a.one \u003c b.one; return a.two \u003c b.two; } }; map\u003cGrade, int, Cmp\u003e m; typedef struct { // 自定义类 int one, two; } Grade; struct Cmp { // 自定义比较类 bool operator()(const Grade\u0026 a, const Grade\u0026 b) const { if (a.one != b.one) return a.one \u003c b.one; return a.two \u003c b.two; } }; map\u003cGrade, int, Cmp\u003e m; key 降序，value 随机 map\u003cint, char, greater\u003cint\u003e\u003e 6.6.2 按 value 排序 key 降序，value 随机 key 降序，value 随机 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:6:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"multimap key允许重复 默认按key升序排列 底层二叉搜索树实现，速度比unordered_multimap慢 基本使用方法同 map。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:6:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cunordered_map\u003e ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:7:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"unordered_map key唯一且不能修改，可以添加或删除 无序 速度比map快 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:7:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"unordered_multimap ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:7:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cset\u003e set是一个有序集合容器。需要#include \u003cset\u003e。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:8:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"set 元素唯一 元素默认升序 底层二叉排序树实现，速度比unordered_set慢 初始化 set\u003cint\u003e s1; // {} set\u003cint\u003e s2 = {1, 2, 3}; // { 1 2 3 } set\u003cint\u003e s3 = s2; // { 1 2 3 } set\u003cint\u003e s4({1, 2, 3}); // { 1 2 3 } int arr[] = {1, 2, 3}; set\u003cint\u003e s5(arr, arr + 3); // { 1 2 3 } set\u003cint\u003e s6(arr, arr + 1); // { 1 } set\u003cint\u003e s7(s4); // { 1 2 3 } set\u003cint\u003e s8(s4.begin(), s4.end()); // { 1 2 3 } set\u003cint\u003e s9(s4.begin(), s4.begin() + 1); // { 1 } struct CompClass { bool operator() (const int\u0026 left, const int\u0026 right) const { return left \u003c right; } }; set\u003cint, CompClass\u003e s10; // { 1 2 3 } 修改 pair\u003citerator, bool\u003e emplace(Args\u0026\u0026... args) 添加一个元素 pair\u003citerator, bool\u003e insert(value_type\u0026\u0026 val) 添加一个元素 void insert(InputIterator first, InputIterator last) 添加 [first, last) 范围内的元素 void insert(initializer_list\u003cvalue_type\u003e il) 添加另一个容器的所有元素 iterator erase(const_iterator position) 删除指定位置元素 size_type erase(const value_type\u0026 val) 删除指定元素 iterator erase(const_iterator first, const_iterator last) 删除 [first, last) 范围内的元素 void swap(set\u0026 x) 交换两个 set void clear() noexcept 清空 容量 bool empty() const noexcept 判断是否为空 size_type size() const noexcept 当前元素个数 遍历 for (auto it = s.begin(); it != s.end(); it++) {*it;} for (auto it = s.rbegin(); it != s.rend(); it++) {*it;} for (int e : s) {e;} for (int\u0026 e : s) {e;} 操作 iterator find(const value_type\u0026 val) 查找指定元素，成功返回迭代器，失败返回 end() size_type count(const value_type\u0026 val) const 返回指定元素的个数 iterator lower_bound(const value_type\u0026 val) 下界，查找第1个大于等于指定元素的位置，成功返回迭代器，失败返回 end() iterator upper_bound(const value_type\u0026 val) 上界，查找最后一个小于等于指定元素的位置，成功返回迭代器，失败返回 end() pair\u003citerator, iterator\u003e equal_range(const value_type\u0026 val) 返回 set 中与指定元素相等的一个范围 [first, second) ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:8:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"multiset 允许重复元素 元素默认升序 速度比unordered_set慢 使用方法同set ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:8:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cunordered_set\u003e unordered_set是一个无序集合容器。需要#include \u003cunordered_set\u003e。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:9:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"unordered_set 元素唯一 无序 底层哈希表实现，速度比set快 使用方法同set ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:9:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"unordered_multiset 允许重复元素 无序 速度比multiset快 使用方法同set ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:9:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cbitset\u003e bitset模拟一个 bool 数组，每个元素只能是 0 或 1. ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:10:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"初始化 bitset\u003c4\u003e b1; // 0000 bitset\u003c4\u003e b2(\"100\"); // 0100, b2[0] == 0 bitset\u003c4\u003e b3(\"1100\"); // 1100 bitset\u003c4\u003e b4(\"11100\"); // 1110 bitset\u003c4\u003e b5(b2); // 0100 string s = \"1010\"; bitset\u003c4\u003e b6(s); // 1010 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:10:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"位运算 bitset\u003c4\u003e a(\"1001\"), b(\"1010\"); a \u0026 b; // 1000 AND a | b; // 1011 OR a ^ b; // 0011 XOR ~a; // 0110 NOT a \u003c\u003c 1; // 0010 SHL a \u003e\u003e 1; // 0100 SHR a == b; // false a != b; // true ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:10:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"操作 reference operator[](size_t pos) 访问指定位置，0 是最右边一位，即最低位 size_t count() const noexcept 返回 1 的 个数 size_t size() const noexcept 返回长度 bool test(size_t pos) const 判断指定位置是否为 1 bool any() const noexcept 判断是否存在某一位是 1 bool none() const noexcept 判断是否全是 0 bool all() const noexcept 判断是否全是 1 bitset\u0026 set() noexcept 全部置为 1 bitset\u0026 set(size_t pos, bool val = true) 指定位置置为 1 bitset\u0026 reset() noexcept 全部置为 0 bitset\u0026 reset(size_t pos) 指定位置置为 0 bitset\u0026 flip() noexcept 翻转 bitset\u0026 flip(size_t pos) 翻转指定位置 string to_string() const 返回该二进制数的字符串 unsigned long to_ulong() const 返回该 2 进制数对应的整数，类型 unsigned long unsigned long long to_ullong() const 返回该 2 进制数对应的整数，类型 unsigned long long ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:10:3","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003calgorithm\u003e ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:11:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"sort 数组排序 bool cmp(int a, int b) { return a \u003e b; } // 自定义降序比较函数 int arr[] = {2, 3, 1}; sort(arr, arr + 3); // {1, 2, 3} sort(arr, arr + 3, cmp); // {3, 2, 1} vector\u003cint\u003e v(arr, arr + 3); sort(v.begin(), v.end()); // {1, 2, 3} sort(v.begin(), v.end(), cmp); // {3, 2, 1} 类（结构体）排序 class Stu { // 自定义类 public: int no; int score; }; bool cmpClass(Stu\u0026 a, Stu\u0026 b) { // 自定义类的降序比较函数 return a.score \u003e b.score; } Stu stu[] = {1, 90, 2, 100, 3, 80}; // {{1, 90}, {2, 100}, {3, 80}} sort(stu, stu + 3, cmpClass); // {{2, 100}, {1, 90}, {3, 80}} ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:11:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"reverse ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:11:2","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"lower_bound ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:11:3","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"upper_bound ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:11:4","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"search ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:11:5","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003ctuple\u003e tuple将不同类型的许多元素打包成一个对象，便于访问，（就像定义了一个只有属性的类，并且属性只定义了类型，未定义名字）。需要#include \u003ctuple\u003e。 元素类型任意 元素数量任意 tuple\u003cint, string\u003e t1; tuple\u003cint, string\u003e t2{t1}; tuple\u003cint, string\u003e t3(t2); tuple\u003cint, string\u003e t4{1, \"one\"}; get\u003c0\u003e(t4); // 1 get\u003c1\u003e(t4); // one get\u003cint\u003e(t4); // 1 get\u003cstring\u003e(t4); // one make_tuple(2, string(\"two\")); ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:12:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"\u003cnumeric\u003e 该头文件包括了一组对数组进行某些操作的算法。 ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:13:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"accumulate T accumulate(InputIterator first, InputIterator last, T init)：默认求和 T accumulate(InputIterator first, InputIterator last, T init, BinaryOperation binary_op)：自定义函数 int res = 0; int arr[3] = {1, 2, 3}; vector\u003cint\u003e vec(arr, arr + 3); accumulate(arr, arr + 3, res); // 求和，6 accumulate(vec.begin(), vec.end(), res); // 求和，6 accumulate(arr, arr + 3, res, minus\u003cint\u003e()); // 累减，-6 accumulate(arr, arr + 3, res, [z](int x, int y) { return x + 2 * y; }); ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:13:1","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["C++"],"content":"参考 Standard C++ Library Reference - cplusplus.com ","date":"2021-02-06","objectID":"/posts/c++-stl-%E6%95%99%E7%A8%8B/:14:0","series":null,"tags":["C++"],"title":"C++ STL 教程","uri":"/posts/c++-stl-%E6%95%99%E7%A8%8B/"},{"categories":["Hugo"],"content":"本文介绍了如何使用 Hugo 的 DoIt 主题搭建一个博客，并使用 Github Action 自动部署到 Github Pages。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:0:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"1 安装 到 Github 下载hugo_extended_0.XX.X_Windows-64bit.zip，解压并将hugo.exe所在目录添加到系统环境变量。 到 Git 官网 下载安装 Git。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:1:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"2 创建网站 hugo new site MyBlog cd MyBlog git init git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt 可在 Hugo Themes 找到更多主题。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:2:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"3 添加内容 输入hugo new posts/My-First-Blog.md，然后打开刚创建的My-First-Blog.md，显示如下： --- title: \"My First Blog\" date: 2021-02-04T16:18:47+08:00 draft: true --- 所有页面均作为草稿创建。文章完成后，如果想要渲染这些页面，请修改为draft: false。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"3.1 在文章中添加图片 Hugo 的配置文件和文章中引用图片都是以static文件夹作为根目录的。 也就是说文章中插入/xxx/yyy.jpg，实际图片存放位置为/static/xxx/yyy.jpg。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:1","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"4 本地部署 hugo server/serve hugo server -D # 渲染草稿，即也渲染 draft: true 的内容 浏览器打开 localhost:1313 即可看到部署在本地的网站。 网站部署后，当配置文件或博客内容发生更改时，页面会自动刷新，不用重新部署。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"5 主题自定义 主题配置文件为MyBlog根目录下的config.toml文件。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"5.1 简单配置 # 域名 baseURL = \"https://backtraxe.github.io/\" # 默认语言 [en, zh-cn, ...] defaultContentLanguage = \"zh-cn\" # 语言 [zh-CN, en-us, ...] languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 标题 title = \"traXe\" # 主题 theme = \"DoIt\" [params] # 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是Backsided的博客\" # 作者配置 [author] name = \"Backsided\" email = \"\" link = \"\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:1","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"高级配置（可选） ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:2","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[params] [params] # 主题版本 version = \"0.2.X\" # 描述 description = \"这是Backsided的博客\" # 关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 选择哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] [params.app] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" [params.search] # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" [params.header] # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"Backsided's World\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = true [params.footer] # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2021 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' [params.section] # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 [params.list] # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 [params.home] # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 [params.social] # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true [params.page] # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是否在 RSS 中显示全文内容 rssFullText = false [params.page.toc] # 目录配置 [params.page.toc] # 是否使用目录 enable = true # 是否保持使用文章前","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:3","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[markup] # Hugo 解析文档的配置 [markup] # 语法高亮设置 [markup.highlight] codeFences = true guessSyntax = true lineNos = true lineNumbersInTable = true # false 是必要的设置 # (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false # Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库 [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.renderer] # 是否在文档中直接使用 HTML 标签 unsafe = true # 目录设置 [markup.tableOfContents] startLevel = 2 endLevel = 6 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:4","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[author] # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:5","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[sitemap] # 网站地图配置 [sitemap] changefreq = \"weekly\" filename = \"sitemap.xml\" priority = 0.5 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:6","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[Permalinks] # Permalinks 配置 [Permalinks] # posts = \":year/:month/:filename\" posts = \":filename\" ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:7","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[privacy] # 隐私信息配置 [privacy] [privacy.twitter] enableDNT = true [privacy.youtube] privacyEnhanced = true ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:8","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[mediaTypes] # 用于输出 Markdown 格式文档的设置 [mediaTypes] [mediaTypes.\"text/plain\"] suffixes = [\"md\"] ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:9","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[outputFormats.MarkDown] # 用于输出 Markdown 格式文档的设置 [outputFormats.MarkDown] mediaType = \"text/plain\" isPlainText = true isHTML = false ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:10","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"[outputs] # 用于 Hugo 输出文档的设置 [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] page = [\"HTML\", \"MarkDown\"] section = [\"HTML\", \"RSS\"] taxonomy = [\"HTML\", \"RSS\"] taxonomyTerm = [\"HTML\"] ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:11","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"6 发布 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:6:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"6.1 静态页面发布 输入hugo，渲染后的静态页面在 ./public 文件夹中，可将该文件夹中的内容发布。 可用-d/--destination或在config.toml中修改publishdir来指定输出地址。 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:6:1","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"6.2 Github Pages 发布 在 Github 新建两个仓库：\u003cUSERNAME\u003e.github.io.data 存放内容，\u003cUSERNAME\u003e.github.io 部署页面。 其中，\u003cUSERNAME\u003e.github.io.data可以设为私人仓库。 git remote add origin https://github.com/backtraxe/backtraxe.github.io.data.git git add --all git commit -m \"init blog\" git push --set-upstream origin master -f 创建一个 Personal access token，命名随意，勾选repo。 进入\u003cUSERNAME\u003e.github.io.data仓库，点击Settings-\u003eSecrets，填入刚才的token；点击Actions-\u003eNew workflow-\u003eset up a workflow yourself，写入如下内容。 name:Hugo Deploy # 名称随意修改on:push:branches:[master ] # 修改为你当前分支jobs:build:runs-on:ubuntu-latest # 指定系统版本steps:- uses:actions/checkout@v2 # 克隆仓库with:submodules:true# 启用子模块fetch-depth:1- name:Setup Hugo # 安装 hugouses:peaceiris/actions-hugo@v2with:hugo-version:'latest'# 指定 hugo 版本- name:Build Hugo # hugo 生成网站run:hugo- name:Deploy Hugo # 部署网站uses:peaceiris/actions-gh-pages@v3with:personal_token:${{ secrets.ACCESS_TOKEN }} # 与 secrets 里的 token 名称对应external_repository:backtraxe/backtraxe.github.io # 指定发布的仓库publish_branch:master # 指定发布仓库的分支publish_dir:./public # 指定要发布的目录 ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:6:2","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"6.3 环境迁移 git clone --recursive https://github.com/backtraxe/backtraxe.github.io.data.git ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:6:3","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"7 全局详细配置 # 域名 baseURL = \"\" # 构建时包含草稿 buildDrafts = false # 内容文件夹 contentDir = \"content\" # 数据文件夹 dataDir = \"data\" # 内容默认语言（中文：zh-cn） defaultContentLanguage = \"en\" # 根目录跳转到默认语言目录 defaultContentLanguageInSubdir = false # 禁用指定类型页面：page, home, section, taxonomy, term, RSS, sitemap, robotsTXT, 404 disableKinds = [] # 禁用实时重载 disableLiveReload = false # 禁用将 url/path 转小写字母 disablePathToLower = false # 启用 Emoji enableEmoji = false # 使用文件的最后 git 提交日期更新 Lastmod 参数 enableGitInfo = false # 启用 inline shortcode enableInlineShortcodes = false # 是否生成 robots.txt 文件 enableRobotsTXT = false # 日期设置 [frontmatter] # 脚注锚的前缀 footnoteAnchorPrefix = \"\" # 脚注返回链接显示的文本 footnoteReturnLinkContents = \"\" # Google Analytics 跟踪 ID googleAnalytics = \"\" # 自动检测内容中的中文/日文/韩文 hasCJKLanguage = false # 图片设置 [imaging] # 语言设置 [languages] # 启用日志 log = false # 日志保存目录 logFile = \"\" # 主题设置 [markup] # 目录设置 [menu] # 最小化构建设置 [minify] # 模块设置 [module] # 每页的默认文章数量 paginate = 10 # 固定链接 [permalinks] # 生成静态网页的目录 publishDir = \"public\" # 相关设置 [related] # 网站地图设置 [sitemap] # 静态文件目录设置 staticDir = \"static\" # 分类设置 [taxonomies] # 主题 theme = \"\" # 主题目录 themesDir = \"themes\" # 标题 title = \"\" 参考：Configure Hugo ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:7:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Hugo"],"content":"8 参考 Quick Start | Hugo GitHub Pages 文档 - GitHub Docs Host on GitHub - Hugo 主题文档 - 基本概念 - LoveIt How to Create Your First Hugo Blog: a Practical Guide 创建 GitHub Pages 站点 - Github 使用Hugo和GitHub搭建博客 - Félix | Medium ","date":"2021-02-04","objectID":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:8:0","series":null,"tags":["Hugo"],"title":"Hugo 博客搭建","uri":"/posts/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["Markdown"],"content":"Markdown 是一种轻量级的「标记语言」，易读易写，简洁至上，被广泛使用。这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例。 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"一、标题 # 一级标题 h1 ## 二级标题 h2 ### 三级标题 h3 #### 四级标题 h4 ##### 五级标题 h5 ###### 六级标题 h6 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:1:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"二、强调 **加粗** *斜体* ~~删除线~~ ***斜体加粗*** ~~**删除线加粗**~~ ~~*斜体删除线*~~ ~~***斜体删除线加粗***~~ 加粗、斜体、删除线、斜体加粗、删除线加粗、斜体删除线、斜体删除线加粗 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:2:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"三、引用 \u003e 引用 \u003e\u003e 嵌套引用 引用 嵌套引用 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:3:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"四、分割线 --- *** ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:4:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"五、图片 ![Backsided's World](https://backtraxe.github.io/apple-touch-icon.png \"Backtraxe's World\") \u003cimg src=\"https://backtraxe.github.io/apple-touch-icon.png\" alt=\"Backtraxe's World\" width=\"30%\" height=\"30%\"\u003e Backtraxe's WorldBacksided\u0026rsquo;s World \" Backtraxe's World ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:5:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"六、超链接 [Backsided's World](https://backtraxe.github.io/) \u003chttps://backtraxe.github.io/\u003e 这个链接用 1 作为网址变量 [Google][1] 这个链接用 runoob 作为网址变量 [Runoob][runoob] 然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [runoob]: http://www.runoob.com/ Backsided’s World https://backtraxe.github.io/ 这个链接用 1 作为网址变量 traXe 这个链接用 runoob 作为网址变量 traXe 然后在文档的结尾为变量赋值（网址） ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:6:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"七、列表 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:7:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"无序列表 - 北京 - 上海 - 广州 - 深圳 北京 上海 广州 深圳 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:7:1","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"有序列表 1. 北京 1. 上海 1. 广州 1. 深圳 或者 1. 北京 2. 上海 3. 广州 4. 深圳 北京 上海 广州 深圳 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:7:2","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"列表嵌套 - 北京 - 上海 - 广东 1. 广州 2. 深圳 北京 上海 广东 广州 深圳 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:7:3","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"八、表格 姓名|分数|排名 --|:--:|--: 张三|100|1 李四|85|2 王五|60|3 姓名 分数 排名 张三 100 1 李四 85 2 王五 60 3 --，:-- : 左对齐 :--: : 居中 --: : 右对齐 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:8:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"九、代码 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"单行代码 `print(\"Hello World!\")` print(\"Hello World!\") ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:1","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"多行代码 \\```cpp #include\u003ciostream\u003e int main() { std::cout \u003c\u003c \"Hello World!\" \u003c\u003c std::endl; return 0; } \\``` #include\u003ciostream\u003eint main() { std::cout \u003c\u003c \"Hello World!\" \u003c\u003c std::endl; return 0; } ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:2","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"十、流程图 \\```flow st=\u003estart: 开始 op=\u003eoperation: My Operation cond=\u003econdition: Yes or No? e=\u003eend st-\u003eop-\u003econd cond(yes)-\u003ee cond(no)-\u003eop \\``` st=\u003estart: 开始 op=\u003eoperation: My Operation cond=\u003econdition: Yes or No? e=\u003eend st-\u003eop-\u003econd cond(yes)-\u003ee cond(no)-\u003eop ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:10:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"十一、LaTeX公式 ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:11:0","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"行内公式 $ E=mc^2 $ $ E=mc^2 $ ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:11:1","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":["Markdown"],"content":"多行公式 $$ \\sum_{i=1}^n a_i=0 $$ $$ f(x_1,x_2,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$ \\sum_{i=1}^n a_i=0 $$ $$ f(x_1,x_2,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ ","date":"2021-02-04","objectID":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:11:2","series":null,"tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"}]